
testavr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000051c  00000590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000720  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c52  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  bc:	0c 94 8c 02 	jmp	0x518	; 0x518 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:
// And a bitmask to clear the bit
#define LED_CLEAR ~(LED_SET)


int main(void)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2e 97       	sbiw	r28, 0x0e	; 14
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61

    DDRE |= LED_SET;
  d8:	8d e2       	ldi	r24, 0x2D	; 45
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	2d e2       	ldi	r18, 0x2D	; 45
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	20 64       	ori	r18, 0x40	; 64
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
    // Turn the LED off.
    PORTE &= LED_CLEAR;
  ea:	8e e2       	ldi	r24, 0x2E	; 46
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2e e2       	ldi	r18, 0x2E	; 46
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	2f 7b       	andi	r18, 0xBF	; 191
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18

	uart_init();
  fc:	0e 94 57 01 	call	0x2ae	; 0x2ae <uart_init>

	while (1)
	{
		uart_transmit('t');
 100:	84 e7       	ldi	r24, 0x74	; 116
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_transmit>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	aa e7       	ldi	r26, 0x7A	; 122
 10e:	b4 e4       	ldi	r27, 0x44	; 68
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	9a 83       	std	Y+2, r25	; 0x02
 114:	ab 83       	std	Y+3, r26	; 0x03
 116:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	4a e7       	ldi	r20, 0x7A	; 122
 11e:	55 e4       	ldi	r21, 0x45	; 69
 120:	69 81       	ldd	r22, Y+1	; 0x01
 122:	7a 81       	ldd	r23, Y+2	; 0x02
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	9c 81       	ldd	r25, Y+4	; 0x04
 128:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__mulsf3>
 12c:	dc 01       	movw	r26, r24
 12e:	cb 01       	movw	r24, r22
 130:	8d 83       	std	Y+5, r24	; 0x05
 132:	9e 83       	std	Y+6, r25	; 0x06
 134:	af 83       	std	Y+7, r26	; 0x07
 136:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	40 e8       	ldi	r20, 0x80	; 128
 13e:	5f e3       	ldi	r21, 0x3F	; 63
 140:	6d 81       	ldd	r22, Y+5	; 0x05
 142:	7e 81       	ldd	r23, Y+6	; 0x06
 144:	8f 81       	ldd	r24, Y+7	; 0x07
 146:	98 85       	ldd	r25, Y+8	; 0x08
 148:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__cmpsf2>
 14c:	88 23       	and	r24, r24
 14e:	2c f4       	brge	.+10     	; 0x15a <main+0x96>
		__ticks = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	9a 87       	std	Y+10, r25	; 0x0a
 156:	89 87       	std	Y+9, r24	; 0x09
 158:	3f c0       	rjmp	.+126    	; 0x1d8 <main+0x114>
	else if (__tmp > 65535)
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	3f ef       	ldi	r19, 0xFF	; 255
 15e:	4f e7       	ldi	r20, 0x7F	; 127
 160:	57 e4       	ldi	r21, 0x47	; 71
 162:	6d 81       	ldd	r22, Y+5	; 0x05
 164:	7e 81       	ldd	r23, Y+6	; 0x06
 166:	8f 81       	ldd	r24, Y+7	; 0x07
 168:	98 85       	ldd	r25, Y+8	; 0x08
 16a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__gesf2>
 16e:	18 16       	cp	r1, r24
 170:	4c f5       	brge	.+82     	; 0x1c4 <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e2       	ldi	r20, 0x20	; 32
 178:	51 e4       	ldi	r21, 0x41	; 65
 17a:	69 81       	ldd	r22, Y+1	; 0x01
 17c:	7a 81       	ldd	r23, Y+2	; 0x02
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__mulsf3>
 186:	dc 01       	movw	r26, r24
 188:	cb 01       	movw	r24, r22
 18a:	bc 01       	movw	r22, r24
 18c:	cd 01       	movw	r24, r26
 18e:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fixunssfsi>
 192:	dc 01       	movw	r26, r24
 194:	cb 01       	movw	r24, r22
 196:	9a 87       	std	Y+10, r25	; 0x0a
 198:	89 87       	std	Y+9, r24	; 0x09
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <main+0xf6>
 19c:	80 e9       	ldi	r24, 0x90	; 144
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	9c 87       	std	Y+12, r25	; 0x0c
 1a2:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a4:	8b 85       	ldd	r24, Y+11	; 0x0b
 1a6:	9c 85       	ldd	r25, Y+12	; 0x0c
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0xe4>
 1ac:	9c 87       	std	Y+12, r25	; 0x0c
 1ae:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b0:	89 85       	ldd	r24, Y+9	; 0x09
 1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	9a 87       	std	Y+10, r25	; 0x0a
 1b8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ba:	89 85       	ldd	r24, Y+9	; 0x09
 1bc:	9a 85       	ldd	r25, Y+10	; 0x0a
 1be:	89 2b       	or	r24, r25
 1c0:	69 f7       	brne	.-38     	; 0x19c <main+0xd8>
 1c2:	14 c0       	rjmp	.+40     	; 0x1ec <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c4:	6d 81       	ldd	r22, Y+5	; 0x05
 1c6:	7e 81       	ldd	r23, Y+6	; 0x06
 1c8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ca:	98 85       	ldd	r25, Y+8	; 0x08
 1cc:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fixunssfsi>
 1d0:	dc 01       	movw	r26, r24
 1d2:	cb 01       	movw	r24, r22
 1d4:	9a 87       	std	Y+10, r25	; 0x0a
 1d6:	89 87       	std	Y+9, r24	; 0x09
 1d8:	89 85       	ldd	r24, Y+9	; 0x09
 1da:	9a 85       	ldd	r25, Y+10	; 0x0a
 1dc:	9e 87       	std	Y+14, r25	; 0x0e
 1de:	8d 87       	std	Y+13, r24	; 0x0d
 1e0:	8d 85       	ldd	r24, Y+13	; 0x0d
 1e2:	9e 85       	ldd	r25, Y+14	; 0x0e
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x120>
 1e8:	9e 87       	std	Y+14, r25	; 0x0e
 1ea:	8d 87       	std	Y+13, r24	; 0x0d

		_delay_ms(1000);

	}
 1ec:	89 cf       	rjmp	.-238    	; 0x100 <main+0x3c>

000001ee <startConversion>:
	return 0;
}

void startConversion()
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADSC);
 1f6:	8a e7       	ldi	r24, 0x7A	; 122
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	2a e7       	ldi	r18, 0x7A	; 122
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	f9 01       	movw	r30, r18
 200:	20 81       	ld	r18, Z
 202:	20 64       	ori	r18, 0x40	; 64
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18

}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <ADCsetup>:


void ADCsetup()
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62

	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2);
 216:	8c e7       	ldi	r24, 0x7C	; 124
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	25 e4       	ldi	r18, 0x45	; 69
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 220:	8a e7       	ldi	r24, 0x7A	; 122
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	2f e8       	ldi	r18, 0x8F	; 143
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18

	DIDR0 = (1 << ADC5D); //disables the digital input buffer
 22a:	8e e7       	ldi	r24, 0x7E	; 126
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	20 e2       	ldi	r18, 0x20	; 32
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18

	startConversion();
 234:	0e 94 f7 00 	call	0x1ee	; 0x1ee <startConversion>
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <GetAdc_value>:

unsigned char GetAdc_value(void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);	// Start A to D conversion
 246:	8a e7       	ldi	r24, 0x7A	; 122
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2a e7       	ldi	r18, 0x7A	; 122
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	20 64       	ori	r18, 0x40	; 64
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
	while (ADCSRA & 1<<ADSC);	// Wait for conversion to complete
 258:	00 00       	nop
 25a:	8a e7       	ldi	r24, 0x7A	; 122
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	80 81       	ld	r24, Z
 262:	88 2f       	mov	r24, r24
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	80 74       	andi	r24, 0x40	; 64
 268:	99 27       	eor	r25, r25
 26a:	89 2b       	or	r24, r25
 26c:	b1 f7       	brne	.-20     	; 0x25a <GetAdc_value+0x1c>
	return (ADCH);
 26e:	89 e7       	ldi	r24, 0x79	; 121
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <uart_transmit>:

void uart_transmit(unsigned char value)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	1f 92       	push	r1
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	89 83       	std	Y+1, r24	; 0x01
	// wait for empty transmit buffer
	//while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) );
	// put data into buffer, sends data
	UDR1 = value;
 288:	8e ec       	ldi	r24, 0xCE	; 206
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	29 81       	ldd	r18, Y+1	; 0x01
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
	PORTE ^= LED_SET;
 292:	8e e2       	ldi	r24, 0x2E	; 46
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2e e2       	ldi	r18, 0x2E	; 46
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	30 81       	ld	r19, Z
 29e:	20 e4       	ldi	r18, 0x40	; 64
 2a0:	23 27       	eor	r18, r19
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18


}
 2a6:	0f 90       	pop	r0
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <uart_init>:

// initialize uart
void uart_init(void)
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
	// set baud rate

	UBRR1H = (unsigned char) (BRC >> 8);
 2b6:	8d ec       	ldi	r24, 0xCD	; 205
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	10 82       	st	Z, r1
	UBRR1L = BRC;
 2be:	8c ec       	ldi	r24, 0xCC	; 204
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	27 e6       	ldi	r18, 0x67	; 103
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18

	//enable recieve and transmit
	UCSR1B = ( 1 << TXEN1 );
 2c8:	89 ec       	ldi	r24, 0xC9	; 201
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	28 e0       	ldi	r18, 0x08	; 8
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18

	//set frame format
	UCSR1C = ( 1 << USBS1 ) | ( 3 << UCSZ10 );
 2d2:	8a ec       	ldi	r24, 0xCA	; 202
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	2e e0       	ldi	r18, 0x0E	; 14
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18

}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <__cmpsf2>:
 2e2:	0e 94 a5 01 	call	0x34a	; 0x34a <__fp_cmp>
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <__cmpsf2+0x8>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret

000002ec <__fixunssfsi>:
 2ec:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__fp_splitA>
 2f0:	88 f0       	brcs	.+34     	; 0x314 <__fixunssfsi+0x28>
 2f2:	9f 57       	subi	r25, 0x7F	; 127
 2f4:	98 f0       	brcs	.+38     	; 0x31c <__fixunssfsi+0x30>
 2f6:	b9 2f       	mov	r27, r25
 2f8:	99 27       	eor	r25, r25
 2fa:	b7 51       	subi	r27, 0x17	; 23
 2fc:	b0 f0       	brcs	.+44     	; 0x32a <__fixunssfsi+0x3e>
 2fe:	e1 f0       	breq	.+56     	; 0x338 <__fixunssfsi+0x4c>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	88 1f       	adc	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	1a f0       	brmi	.+6      	; 0x310 <__fixunssfsi+0x24>
 30a:	ba 95       	dec	r27
 30c:	c9 f7       	brne	.-14     	; 0x300 <__fixunssfsi+0x14>
 30e:	14 c0       	rjmp	.+40     	; 0x338 <__fixunssfsi+0x4c>
 310:	b1 30       	cpi	r27, 0x01	; 1
 312:	91 f0       	breq	.+36     	; 0x338 <__fixunssfsi+0x4c>
 314:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__fp_zero>
 318:	b1 e0       	ldi	r27, 0x01	; 1
 31a:	08 95       	ret
 31c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_zero>
 320:	67 2f       	mov	r22, r23
 322:	78 2f       	mov	r23, r24
 324:	88 27       	eor	r24, r24
 326:	b8 5f       	subi	r27, 0xF8	; 248
 328:	39 f0       	breq	.+14     	; 0x338 <__fixunssfsi+0x4c>
 32a:	b9 3f       	cpi	r27, 0xF9	; 249
 32c:	cc f3       	brlt	.-14     	; 0x320 <__fixunssfsi+0x34>
 32e:	86 95       	lsr	r24
 330:	77 95       	ror	r23
 332:	67 95       	ror	r22
 334:	b3 95       	inc	r27
 336:	d9 f7       	brne	.-10     	; 0x32e <__fixunssfsi+0x42>
 338:	3e f4       	brtc	.+14     	; 0x348 <__fixunssfsi+0x5c>
 33a:	90 95       	com	r25
 33c:	80 95       	com	r24
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	8f 4f       	sbci	r24, 0xFF	; 255
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	08 95       	ret

0000034a <__fp_cmp>:
 34a:	99 0f       	add	r25, r25
 34c:	00 08       	sbc	r0, r0
 34e:	55 0f       	add	r21, r21
 350:	aa 0b       	sbc	r26, r26
 352:	e0 e8       	ldi	r30, 0x80	; 128
 354:	fe ef       	ldi	r31, 0xFE	; 254
 356:	16 16       	cp	r1, r22
 358:	17 06       	cpc	r1, r23
 35a:	e8 07       	cpc	r30, r24
 35c:	f9 07       	cpc	r31, r25
 35e:	c0 f0       	brcs	.+48     	; 0x390 <__fp_cmp+0x46>
 360:	12 16       	cp	r1, r18
 362:	13 06       	cpc	r1, r19
 364:	e4 07       	cpc	r30, r20
 366:	f5 07       	cpc	r31, r21
 368:	98 f0       	brcs	.+38     	; 0x390 <__fp_cmp+0x46>
 36a:	62 1b       	sub	r22, r18
 36c:	73 0b       	sbc	r23, r19
 36e:	84 0b       	sbc	r24, r20
 370:	95 0b       	sbc	r25, r21
 372:	39 f4       	brne	.+14     	; 0x382 <__fp_cmp+0x38>
 374:	0a 26       	eor	r0, r26
 376:	61 f0       	breq	.+24     	; 0x390 <__fp_cmp+0x46>
 378:	23 2b       	or	r18, r19
 37a:	24 2b       	or	r18, r20
 37c:	25 2b       	or	r18, r21
 37e:	21 f4       	brne	.+8      	; 0x388 <__fp_cmp+0x3e>
 380:	08 95       	ret
 382:	0a 26       	eor	r0, r26
 384:	09 f4       	brne	.+2      	; 0x388 <__fp_cmp+0x3e>
 386:	a1 40       	sbci	r26, 0x01	; 1
 388:	a6 95       	lsr	r26
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	81 1d       	adc	r24, r1
 38e:	81 1d       	adc	r24, r1
 390:	08 95       	ret

00000392 <__fp_split3>:
 392:	57 fd       	sbrc	r21, 7
 394:	90 58       	subi	r25, 0x80	; 128
 396:	44 0f       	add	r20, r20
 398:	55 1f       	adc	r21, r21
 39a:	59 f0       	breq	.+22     	; 0x3b2 <__fp_splitA+0x10>
 39c:	5f 3f       	cpi	r21, 0xFF	; 255
 39e:	71 f0       	breq	.+28     	; 0x3bc <__fp_splitA+0x1a>
 3a0:	47 95       	ror	r20

000003a2 <__fp_splitA>:
 3a2:	88 0f       	add	r24, r24
 3a4:	97 fb       	bst	r25, 7
 3a6:	99 1f       	adc	r25, r25
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <__fp_splitA+0x20>
 3aa:	9f 3f       	cpi	r25, 0xFF	; 255
 3ac:	79 f0       	breq	.+30     	; 0x3cc <__fp_splitA+0x2a>
 3ae:	87 95       	ror	r24
 3b0:	08 95       	ret
 3b2:	12 16       	cp	r1, r18
 3b4:	13 06       	cpc	r1, r19
 3b6:	14 06       	cpc	r1, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	f2 cf       	rjmp	.-28     	; 0x3a0 <__fp_split3+0xe>
 3bc:	46 95       	lsr	r20
 3be:	f1 df       	rcall	.-30     	; 0x3a2 <__fp_splitA>
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <__fp_splitA+0x30>
 3c2:	16 16       	cp	r1, r22
 3c4:	17 06       	cpc	r1, r23
 3c6:	18 06       	cpc	r1, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	f1 cf       	rjmp	.-30     	; 0x3ae <__fp_splitA+0xc>
 3cc:	86 95       	lsr	r24
 3ce:	71 05       	cpc	r23, r1
 3d0:	61 05       	cpc	r22, r1
 3d2:	08 94       	sec
 3d4:	08 95       	ret

000003d6 <__fp_zero>:
 3d6:	e8 94       	clt

000003d8 <__fp_szero>:
 3d8:	bb 27       	eor	r27, r27
 3da:	66 27       	eor	r22, r22
 3dc:	77 27       	eor	r23, r23
 3de:	cb 01       	movw	r24, r22
 3e0:	97 f9       	bld	r25, 7
 3e2:	08 95       	ret

000003e4 <__gesf2>:
 3e4:	0e 94 a5 01 	call	0x34a	; 0x34a <__fp_cmp>
 3e8:	08 f4       	brcc	.+2      	; 0x3ec <__gesf2+0x8>
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	08 95       	ret

000003ee <__mulsf3>:
 3ee:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3x>
 3f2:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__fp_round>
 3f6:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_pscA>
 3fa:	38 f0       	brcs	.+14     	; 0x40a <__mulsf3+0x1c>
 3fc:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fp_pscB>
 400:	20 f0       	brcs	.+8      	; 0x40a <__mulsf3+0x1c>
 402:	95 23       	and	r25, r21
 404:	11 f0       	breq	.+4      	; 0x40a <__mulsf3+0x1c>
 406:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_inf>
 40a:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_nan>
 40e:	11 24       	eor	r1, r1
 410:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__fp_szero>

00000414 <__mulsf3x>:
 414:	0e 94 c9 01 	call	0x392	; 0x392 <__fp_split3>
 418:	70 f3       	brcs	.-36     	; 0x3f6 <__mulsf3+0x8>

0000041a <__mulsf3_pse>:
 41a:	95 9f       	mul	r25, r21
 41c:	c1 f3       	breq	.-16     	; 0x40e <__mulsf3+0x20>
 41e:	95 0f       	add	r25, r21
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	55 1f       	adc	r21, r21
 424:	62 9f       	mul	r22, r18
 426:	f0 01       	movw	r30, r0
 428:	72 9f       	mul	r23, r18
 42a:	bb 27       	eor	r27, r27
 42c:	f0 0d       	add	r31, r0
 42e:	b1 1d       	adc	r27, r1
 430:	63 9f       	mul	r22, r19
 432:	aa 27       	eor	r26, r26
 434:	f0 0d       	add	r31, r0
 436:	b1 1d       	adc	r27, r1
 438:	aa 1f       	adc	r26, r26
 43a:	64 9f       	mul	r22, r20
 43c:	66 27       	eor	r22, r22
 43e:	b0 0d       	add	r27, r0
 440:	a1 1d       	adc	r26, r1
 442:	66 1f       	adc	r22, r22
 444:	82 9f       	mul	r24, r18
 446:	22 27       	eor	r18, r18
 448:	b0 0d       	add	r27, r0
 44a:	a1 1d       	adc	r26, r1
 44c:	62 1f       	adc	r22, r18
 44e:	73 9f       	mul	r23, r19
 450:	b0 0d       	add	r27, r0
 452:	a1 1d       	adc	r26, r1
 454:	62 1f       	adc	r22, r18
 456:	83 9f       	mul	r24, r19
 458:	a0 0d       	add	r26, r0
 45a:	61 1d       	adc	r22, r1
 45c:	22 1f       	adc	r18, r18
 45e:	74 9f       	mul	r23, r20
 460:	33 27       	eor	r19, r19
 462:	a0 0d       	add	r26, r0
 464:	61 1d       	adc	r22, r1
 466:	23 1f       	adc	r18, r19
 468:	84 9f       	mul	r24, r20
 46a:	60 0d       	add	r22, r0
 46c:	21 1d       	adc	r18, r1
 46e:	82 2f       	mov	r24, r18
 470:	76 2f       	mov	r23, r22
 472:	6a 2f       	mov	r22, r26
 474:	11 24       	eor	r1, r1
 476:	9f 57       	subi	r25, 0x7F	; 127
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	9a f0       	brmi	.+38     	; 0x4a2 <__mulsf3_pse+0x88>
 47c:	f1 f0       	breq	.+60     	; 0x4ba <__mulsf3_pse+0xa0>
 47e:	88 23       	and	r24, r24
 480:	4a f0       	brmi	.+18     	; 0x494 <__mulsf3_pse+0x7a>
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	bb 1f       	adc	r27, r27
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	91 50       	subi	r25, 0x01	; 1
 490:	50 40       	sbci	r21, 0x00	; 0
 492:	a9 f7       	brne	.-22     	; 0x47e <__mulsf3_pse+0x64>
 494:	9e 3f       	cpi	r25, 0xFE	; 254
 496:	51 05       	cpc	r21, r1
 498:	80 f0       	brcs	.+32     	; 0x4ba <__mulsf3_pse+0xa0>
 49a:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_inf>
 49e:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__fp_szero>
 4a2:	5f 3f       	cpi	r21, 0xFF	; 255
 4a4:	e4 f3       	brlt	.-8      	; 0x49e <__mulsf3_pse+0x84>
 4a6:	98 3e       	cpi	r25, 0xE8	; 232
 4a8:	d4 f3       	brlt	.-12     	; 0x49e <__mulsf3_pse+0x84>
 4aa:	86 95       	lsr	r24
 4ac:	77 95       	ror	r23
 4ae:	67 95       	ror	r22
 4b0:	b7 95       	ror	r27
 4b2:	f7 95       	ror	r31
 4b4:	e7 95       	ror	r30
 4b6:	9f 5f       	subi	r25, 0xFF	; 255
 4b8:	c1 f7       	brne	.-16     	; 0x4aa <__mulsf3_pse+0x90>
 4ba:	fe 2b       	or	r31, r30
 4bc:	88 0f       	add	r24, r24
 4be:	91 1d       	adc	r25, r1
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	97 f9       	bld	r25, 7
 4c6:	08 95       	ret

000004c8 <__fp_inf>:
 4c8:	97 f9       	bld	r25, 7
 4ca:	9f 67       	ori	r25, 0x7F	; 127
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	08 95       	ret

000004d4 <__fp_nan>:
 4d4:	9f ef       	ldi	r25, 0xFF	; 255
 4d6:	80 ec       	ldi	r24, 0xC0	; 192
 4d8:	08 95       	ret

000004da <__fp_pscA>:
 4da:	00 24       	eor	r0, r0
 4dc:	0a 94       	dec	r0
 4de:	16 16       	cp	r1, r22
 4e0:	17 06       	cpc	r1, r23
 4e2:	18 06       	cpc	r1, r24
 4e4:	09 06       	cpc	r0, r25
 4e6:	08 95       	ret

000004e8 <__fp_pscB>:
 4e8:	00 24       	eor	r0, r0
 4ea:	0a 94       	dec	r0
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	14 06       	cpc	r1, r20
 4f2:	05 06       	cpc	r0, r21
 4f4:	08 95       	ret

000004f6 <__fp_round>:
 4f6:	09 2e       	mov	r0, r25
 4f8:	03 94       	inc	r0
 4fa:	00 0c       	add	r0, r0
 4fc:	11 f4       	brne	.+4      	; 0x502 <__fp_round+0xc>
 4fe:	88 23       	and	r24, r24
 500:	52 f0       	brmi	.+20     	; 0x516 <__fp_round+0x20>
 502:	bb 0f       	add	r27, r27
 504:	40 f4       	brcc	.+16     	; 0x516 <__fp_round+0x20>
 506:	bf 2b       	or	r27, r31
 508:	11 f4       	brne	.+4      	; 0x50e <__fp_round+0x18>
 50a:	60 ff       	sbrs	r22, 0
 50c:	04 c0       	rjmp	.+8      	; 0x516 <__fp_round+0x20>
 50e:	6f 5f       	subi	r22, 0xFF	; 255
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	08 95       	ret

00000518 <_exit>:
 518:	f8 94       	cli

0000051a <__stop_program>:
 51a:	ff cf       	rjmp	.-2      	; 0x51a <__stop_program>
