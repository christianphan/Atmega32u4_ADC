
testavr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001ba0  00001c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800118  00800118  00001c4c  2**0
                  ALLOC
  3 .stab         000025d4  00000000  00000000  00001c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027da  00000000  00000000  00004220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000069fa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a0c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__ctors_end>
       4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      10:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      14:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      28:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      2c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      30:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      38:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      3c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      40:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      48:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      54:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      5c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      60:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      68:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      6c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      70:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      74:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      78:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      7c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      80:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      84:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      88:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      8c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      90:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      94:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      98:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      9c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	53 74       	andi	r21, 0x43	; 67
      ae:	61 72       	andi	r22, 0x21	; 33
      b0:	74 69       	ori	r23, 0x94	; 148
      b2:	6e 67       	ori	r22, 0x7E	; 126
      b4:	20 61       	ori	r18, 0x10	; 16
      b6:	64 76       	andi	r22, 0x64	; 100
      b8:	65 72       	andi	r22, 0x25	; 37
      ba:	74 69       	ori	r23, 0x94	; 148
      bc:	73 69       	ori	r23, 0x93	; 147
      be:	6e 67       	ori	r22, 0x7E	; 126
      c0:	0d 0a       	sbc	r0, r29
	...

000000c3 <string_pipe_closed>:
      c3:	50 69 70 65 20 6e 6f 74 20 6f 70 65 6e 0d 0a 00     Pipe not open...

000000d3 <string_pipes_open>:
      d3:	4f 70 65 6e 20 50 69 70 65 73 3a 20 00              Open Pipes: .

000000e0 <string_connection>:
      e0:	43 6f 6e 6e 65 63 74 69 6f 6e 20 66 72 6f 6d 3a     Connection from:
      f0:	20 00                                                .

000000f2 <string_received>:
      f2:	52 65 63 65 69 76 65 64 20 75 6e 68 61 6e 64 6c     Received unhandl
     102:	65 64 20 64 61 74 61 3a 20 00                       ed data: .

0000010c <string_temperature>:
     10c:	54 65 6d 70 65 72 61 74 75 72 65 3a 20 00           Temperature: .

0000011a <string_celsius>:
     11a:	20 43 0d 0a 00                                       C...

0000011f <setup_data>:
     11f:	00 07 06 00 00 03 02 42 07 00 00 00 00 00 00 00     .......B........
	...
     13f:	00 00 1f 06 10 00 01 00 00 00 00 00 02 00 02 01     ................
     14f:	01 00 00 06 00 01 00 00 00 00 00 00 00 00 00 00     ................
     15f:	00 00 00 1f 06 10 1c 00 00 00 00 00 00 00 00 00     ................
	...
     17b:	00 00 50 03 90 01 ff 00 1f 06 10 38 ff ff 02 58     ..P........8...X
     18b:	0a 05 00 00 00 00 00 00 00 10 00 00 00 00 00 00     ................
	...
     1a3:	00 05 06 10 54 00 00 00 00 00 00 00 00 00 00 00     ....T...........
	...
     1c3:	00 00 1f 06 20 00 04 04 02 02 00 01 28 00 01 00     .... .......(...
     1d3:	18 04 04 05 05 00 02 28 03 01 02 03 00 00 2a 04     .......(......*.
     1e3:	04 14 00 1f 06 20 1c 0b 00 03 2a 00 01 41 56 52     ..... ....*..AVR
     1f3:	20 6e 52 46 38 30 30 31 63 6f 6d 00 00 00 00 00      nRF8001com.....
     203:	00 04 04 00 1f 06 20 38 05 05 00 04 28 03 01 02     ...... 8....(...
     213:	05 00 01 2a 06 04 03 02 00 05 2a 01 01 00 00 04     ...*......*.....
     223:	04 05 05 00 00 1f 06 20 54 06 28 03 01 02 07 00     ....... T.(.....
     233:	04 2a 06 04 09 08 00 07 2a 04 01 06 00 06 00 00     .*......*.......
     243:	00 ff ff 04 04 00 1f 06 20 70 02 02 00 08 28 00     ........ p....(.
     253:	01 01 18 04 04 10 10 00 09 28 00 01 81 f5 74 38     .........(....t8
     263:	b3 20 71 ab 43 4c 00 1f 06 20 8c 96 c6 01 a0 15     . q.CL... ......
     273:	42 04 04 13 13 00 0a 28 03 01 06 0b 00 81 f5 74     B......(.......t
     283:	38 b3 20 71 ab 43 4c 00 1f 06 20 a8 96 c6 01 c0     8. q.CL... .....
     293:	15 42 46 14 02 01 00 0b c0 01 02 00 04 04 13 13     .BF.............
     2a3:	00 0c 28 03 01 10 0d 00 00 1f 06 20 c4 81 f5 74     ..(........ ...t
     2b3:	38 b3 20 71 ab 43 4c 96 c6 02 c0 15 42 16 00 02     8. q.CL.....B...
     2c3:	01 00 0d c0 02 02 00 46 14 00 1f 06 20 e0 03 02     .......F.... ...
     2d3:	00 0e 29 02 01 00 00 04 04 13 13 00 0f 28 03 01     ..)..........(..
     2e3:	02 10 00 81 f5 74 38 b3 20 71 00 1a 06 20 fc ab     .....t8. q... ..
     2f3:	43 4c 96 c6 00 cf 15 42 06 04 05 04 00 10 cf 00     CL.....B........
     303:	02 b0 0b fa ce 00 00 00 00 00 00 00 17 06 40 00     ..............@.
     313:	c0 01 02 00 08 04 00 0b 00 00 c0 02 02 00 02 04     ................
     323:	00 0d 00 0e 00 00 00 00 00 00 00 00 00 13 06 50     ...............P
     333:	00 81 f5 74 38 b3 20 71 ab 43 4c 96 c6 00 00 15     ...t8. q.CL.....
     343:	42 00 00 00 00 00 00 00 00 00 00 00 00 00 09 06     B...............
     353:	60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
     36f:	00 00 00 06 06 f0 00 03 48 ec 00 00 00 00 00 00     ........H.......
	...

00000392 <__ctors_end>:
     392:	11 24       	eor	r1, r1
     394:	1f be       	out	0x3f, r1	; 63
     396:	cf ef       	ldi	r28, 0xFF	; 255
     398:	da e0       	ldi	r29, 0x0A	; 10
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	cd bf       	out	0x3d, r28	; 61

0000039e <__do_copy_data>:
     39e:	11 e0       	ldi	r17, 0x01	; 1
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b1 e0       	ldi	r27, 0x01	; 1
     3a4:	e0 ea       	ldi	r30, 0xA0	; 160
     3a6:	fb e1       	ldi	r31, 0x1B	; 27
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__do_copy_data+0x10>
     3aa:	05 90       	lpm	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	a8 31       	cpi	r26, 0x18	; 24
     3b0:	b1 07       	cpc	r27, r17
     3b2:	d9 f7       	brne	.-10     	; 0x3aa <__do_copy_data+0xc>

000003b4 <__do_clear_bss>:
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	a8 e1       	ldi	r26, 0x18	; 24
     3b8:	b1 e0       	ldi	r27, 0x01	; 1
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	af 3b       	cpi	r26, 0xBF	; 191
     3c0:	b2 07       	cpc	r27, r18
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>
     3c4:	0e 94 45 02 	call	0x48a	; 0x48a <main>
     3c8:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <_exit>

000003cc <__bad_interrupt>:
     3cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d0 <GetAdc_value>:

char buffer[20];


unsigned char GetAdc_value(void)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);	// Start A to D conversion
     3d8:	8a e7       	ldi	r24, 0x7A	; 122
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	2a e7       	ldi	r18, 0x7A	; 122
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	f9 01       	movw	r30, r18
     3e2:	20 81       	ld	r18, Z
     3e4:	20 64       	ori	r18, 0x40	; 64
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
	while (ADCSRA & 1<<ADSC);	// Wait for conversion to complete
     3ea:	00 00       	nop
     3ec:	8a e7       	ldi	r24, 0x7A	; 122
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	88 2f       	mov	r24, r24
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	80 74       	andi	r24, 0x40	; 64
     3fa:	99 27       	eor	r25, r25
     3fc:	89 2b       	or	r24, r25
     3fe:	b1 f7       	brne	.-20     	; 0x3ec <GetAdc_value+0x1c>
	return (ADCH);
     400:	89 e7       	ldi	r24, 0x79	; 121
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	fc 01       	movw	r30, r24
     406:	80 81       	ld	r24, Z
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <uart_sendstr>:

void uart_sendstr(char * str)
{
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	00 d0       	rcall	.+0      	; 0x414 <uart_sendstr+0x6>
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	89 83       	std	Y+1, r24	; 0x01
	while(*str)
     41c:	0b c0       	rjmp	.+22     	; 0x434 <uart_sendstr+0x26>
	{
		uart_putchar(*str++);
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	9c 01       	movw	r18, r24
     424:	2f 5f       	subi	r18, 0xFF	; 255
     426:	3f 4f       	sbci	r19, 0xFF	; 255
     428:	3a 83       	std	Y+2, r19	; 0x02
     42a:	29 83       	std	Y+1, r18	; 0x01
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
	return (ADCH);
}

void uart_sendstr(char * str)
{
	while(*str)
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	9a 81       	ldd	r25, Y+2	; 0x02
     438:	fc 01       	movw	r30, r24
     43a:	80 81       	ld	r24, Z
     43c:	88 23       	and	r24, r24
     43e:	79 f7       	brne	.-34     	; 0x41e <uart_sendstr+0x10>
	{
		uart_putchar(*str++);

	}
	uart_putchar(' ');
     440:	80 e2       	ldi	r24, 0x20	; 32
     442:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
}
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <ADCsetup>:

void ADCsetup()
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62

	ADMUX = (1 << MUX0) | (1<<ADLAR); //reads adc1
     458:	8c e7       	ldi	r24, 0x7C	; 124
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	21 e2       	ldi	r18, 0x21	; 33
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     462:	8a e7       	ldi	r24, 0x7A	; 122
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	27 e8       	ldi	r18, 0x87	; 135
     468:	fc 01       	movw	r30, r24
     46a:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC5D); //disables the digital input buffer
     46c:	8e e7       	ldi	r24, 0x7E	; 126
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	20 e2       	ldi	r18, 0x20	; 32
     472:	fc 01       	movw	r30, r24
     474:	20 83       	st	Z, r18

}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <sendNRF>:

void sendNRF()
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62

}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <main>:

int main(void)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	a0 97       	sbiw	r28, 0x20	; 32
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
	int8_t ret;
	uart_init();
     49e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <uart_init>
	ADCsetup();
     4a2:	0e 94 28 02 	call	0x450	; 0x450 <ADCsetup>
	spi_init();
     4a6:	0e 94 83 0a 	call	0x1506	; 0x1506 <spi_init>
	nrf_tx_map_pipes(); //might not work
     4aa:	0e 94 fe 04 	call	0x9fc	; 0x9fc <nrf_tx_map_pipes>
	ret = nrf_setup(); //this part creates error. transmit part
     4ae:	0e 94 81 03 	call	0x702	; 0x702 <nrf_setup>
     4b2:	89 83       	std	Y+1, r24	; 0x01
	uart_putint(ret, 1);  //figure out what this does
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	08 2e       	mov	r0, r24
     4b8:	00 0c       	add	r0, r0
     4ba:	99 0b       	sbc	r25, r25
     4bc:	aa 0b       	sbc	r26, r26
     4be:	bb 0b       	sbc	r27, r27
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	bc 01       	movw	r22, r24
     4c4:	cd 01       	movw	r24, r26
     4c6:	0e 94 98 0b 	call	0x1730	; 0x1730 <uart_putint>

	while (1)
	{

		uart_putchar('k');
     4ca:	8b e6       	ldi	r24, 0x6B	; 107
     4cc:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
		char adc_str[16];
		unsigned char adc_value = '0';
     4d0:	80 e3       	ldi	r24, 0x30	; 48
     4d2:	8a 83       	std	Y+2, r24	; 0x02
		adc_value =	GetAdc_value();
     4d4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GetAdc_value>
     4d8:	8a 83       	std	Y+2, r24	; 0x02

		//converts adc_value
		itoa(adc_value, adc_str, 10);
     4da:	8a 81       	ldd	r24, Y+2	; 0x02
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	9e 01       	movw	r18, r28
     4e2:	2f 5e       	subi	r18, 0xEF	; 239
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	4a e0       	ldi	r20, 0x0A	; 10
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	b9 01       	movw	r22, r18
     4ec:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <itoa>
		uart_sendstr(adc_str);
     4f0:	ce 01       	movw	r24, r28
     4f2:	41 96       	adiw	r24, 0x11	; 17
     4f4:	0e 94 07 02 	call	0x40e	; 0x40e <uart_sendstr>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	aa ef       	ldi	r26, 0xFA	; 250
     4fe:	b3 e4       	ldi	r27, 0x43	; 67
     500:	8b 83       	std	Y+3, r24	; 0x03
     502:	9c 83       	std	Y+4, r25	; 0x04
     504:	ad 83       	std	Y+5, r26	; 0x05
     506:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	4a e7       	ldi	r20, 0x7A	; 122
     50e:	55 e4       	ldi	r21, 0x45	; 69
     510:	6b 81       	ldd	r22, Y+3	; 0x03
     512:	7c 81       	ldd	r23, Y+4	; 0x04
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	9e 81       	ldd	r25, Y+6	; 0x06
     518:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__mulsf3>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	8f 83       	std	Y+7, r24	; 0x07
     522:	98 87       	std	Y+8, r25	; 0x08
     524:	a9 87       	std	Y+9, r26	; 0x09
     526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e8       	ldi	r20, 0x80	; 128
     52e:	5f e3       	ldi	r21, 0x3F	; 63
     530:	6f 81       	ldd	r22, Y+7	; 0x07
     532:	78 85       	ldd	r23, Y+8	; 0x08
     534:	89 85       	ldd	r24, Y+9	; 0x09
     536:	9a 85       	ldd	r25, Y+10	; 0x0a
     538:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__cmpsf2>
     53c:	88 23       	and	r24, r24
     53e:	2c f4       	brge	.+10     	; 0x54a <main+0xc0>
		__ticks = 1;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	9c 87       	std	Y+12, r25	; 0x0c
     546:	8b 87       	std	Y+11, r24	; 0x0b
     548:	3f c0       	rjmp	.+126    	; 0x5c8 <main+0x13e>
	else if (__tmp > 65535)
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	3f ef       	ldi	r19, 0xFF	; 255
     54e:	4f e7       	ldi	r20, 0x7F	; 127
     550:	57 e4       	ldi	r21, 0x47	; 71
     552:	6f 81       	ldd	r22, Y+7	; 0x07
     554:	78 85       	ldd	r23, Y+8	; 0x08
     556:	89 85       	ldd	r24, Y+9	; 0x09
     558:	9a 85       	ldd	r25, Y+10	; 0x0a
     55a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__gesf2>
     55e:	18 16       	cp	r1, r24
     560:	4c f5       	brge	.+82     	; 0x5b4 <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	40 e2       	ldi	r20, 0x20	; 32
     568:	51 e4       	ldi	r21, 0x41	; 65
     56a:	6b 81       	ldd	r22, Y+3	; 0x03
     56c:	7c 81       	ldd	r23, Y+4	; 0x04
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	9e 81       	ldd	r25, Y+6	; 0x06
     572:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__mulsf3>
     576:	dc 01       	movw	r26, r24
     578:	cb 01       	movw	r24, r22
     57a:	bc 01       	movw	r22, r24
     57c:	cd 01       	movw	r24, r26
     57e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     582:	dc 01       	movw	r26, r24
     584:	cb 01       	movw	r24, r22
     586:	9c 87       	std	Y+12, r25	; 0x0c
     588:	8b 87       	std	Y+11, r24	; 0x0b
     58a:	0f c0       	rjmp	.+30     	; 0x5aa <main+0x120>
     58c:	80 e9       	ldi	r24, 0x90	; 144
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	9e 87       	std	Y+14, r25	; 0x0e
     592:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     594:	8d 85       	ldd	r24, Y+13	; 0x0d
     596:	9e 85       	ldd	r25, Y+14	; 0x0e
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <main+0x10e>
     59c:	9e 87       	std	Y+14, r25	; 0x0e
     59e:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	9c 87       	std	Y+12, r25	; 0x0c
     5a8:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ac:	9c 85       	ldd	r25, Y+12	; 0x0c
     5ae:	89 2b       	or	r24, r25
     5b0:	69 f7       	brne	.-38     	; 0x58c <main+0x102>
     5b2:	14 c0       	rjmp	.+40     	; 0x5dc <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b4:	6f 81       	ldd	r22, Y+7	; 0x07
     5b6:	78 85       	ldd	r23, Y+8	; 0x08
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     5bc:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	9c 87       	std	Y+12, r25	; 0x0c
     5c6:	8b 87       	std	Y+11, r24	; 0x0b
     5c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ca:	9c 85       	ldd	r25, Y+12	; 0x0c
     5cc:	98 8b       	std	Y+16, r25	; 0x10
     5ce:	8f 87       	std	Y+15, r24	; 0x0f
     5d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     5d2:	98 89       	ldd	r25, Y+16	; 0x10
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <main+0x14a>
     5d8:	98 8b       	std	Y+16, r25	; 0x10
     5da:	8f 87       	std	Y+15, r24	; 0x0f
		//nrf_print_temperature();
		_delay_ms(500);

	}
     5dc:	76 cf       	rjmp	.-276    	; 0x4ca <main+0x40>

000005de <nrf_reset_module>:
 * @param none
 * @return 0 on success, a negative value in case of an error (see nrf_setup())
 */
int8_t
nrf_reset_module(void)
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	2e 97       	sbiw	r28, 0x0e	; 14
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
    led_setup_off();
    led_connect_off();

    ble_reset_low();
     5f2:	85 e2       	ldi	r24, 0x25	; 37
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	25 e2       	ldi	r18, 0x25	; 37
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	2f 7e       	andi	r18, 0xEF	; 239
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	a0 e2       	ldi	r26, 0x20	; 32
     60a:	b1 e4       	ldi	r27, 0x41	; 65
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	ab 83       	std	Y+3, r26	; 0x03
     612:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	4a e7       	ldi	r20, 0x7A	; 122
     61a:	55 e4       	ldi	r21, 0x45	; 69
     61c:	69 81       	ldd	r22, Y+1	; 0x01
     61e:	7a 81       	ldd	r23, Y+2	; 0x02
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	9c 81       	ldd	r25, Y+4	; 0x04
     624:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__mulsf3>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	8d 83       	std	Y+5, r24	; 0x05
     62e:	9e 83       	std	Y+6, r25	; 0x06
     630:	af 83       	std	Y+7, r26	; 0x07
     632:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e8       	ldi	r20, 0x80	; 128
     63a:	5f e3       	ldi	r21, 0x3F	; 63
     63c:	6d 81       	ldd	r22, Y+5	; 0x05
     63e:	7e 81       	ldd	r23, Y+6	; 0x06
     640:	8f 81       	ldd	r24, Y+7	; 0x07
     642:	98 85       	ldd	r25, Y+8	; 0x08
     644:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__cmpsf2>
     648:	88 23       	and	r24, r24
     64a:	2c f4       	brge	.+10     	; 0x656 <nrf_reset_module+0x78>
		__ticks = 1;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	9a 87       	std	Y+10, r25	; 0x0a
     652:	89 87       	std	Y+9, r24	; 0x09
     654:	3f c0       	rjmp	.+126    	; 0x6d4 <nrf_reset_module+0xf6>
	else if (__tmp > 65535)
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	3f ef       	ldi	r19, 0xFF	; 255
     65a:	4f e7       	ldi	r20, 0x7F	; 127
     65c:	57 e4       	ldi	r21, 0x47	; 71
     65e:	6d 81       	ldd	r22, Y+5	; 0x05
     660:	7e 81       	ldd	r23, Y+6	; 0x06
     662:	8f 81       	ldd	r24, Y+7	; 0x07
     664:	98 85       	ldd	r25, Y+8	; 0x08
     666:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__gesf2>
     66a:	18 16       	cp	r1, r24
     66c:	4c f5       	brge	.+82     	; 0x6c0 <nrf_reset_module+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e2       	ldi	r20, 0x20	; 32
     674:	51 e4       	ldi	r21, 0x41	; 65
     676:	69 81       	ldd	r22, Y+1	; 0x01
     678:	7a 81       	ldd	r23, Y+2	; 0x02
     67a:	8b 81       	ldd	r24, Y+3	; 0x03
     67c:	9c 81       	ldd	r25, Y+4	; 0x04
     67e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__mulsf3>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	bc 01       	movw	r22, r24
     688:	cd 01       	movw	r24, r26
     68a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	9a 87       	std	Y+10, r25	; 0x0a
     694:	89 87       	std	Y+9, r24	; 0x09
     696:	0f c0       	rjmp	.+30     	; 0x6b6 <nrf_reset_module+0xd8>
     698:	80 e9       	ldi	r24, 0x90	; 144
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	9c 87       	std	Y+12, r25	; 0x0c
     69e:	8b 87       	std	Y+11, r24	; 0x0b
     6a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <nrf_reset_module+0xc6>
     6a8:	9c 87       	std	Y+12, r25	; 0x0c
     6aa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ac:	89 85       	ldd	r24, Y+9	; 0x09
     6ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	9a 87       	std	Y+10, r25	; 0x0a
     6b4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b6:	89 85       	ldd	r24, Y+9	; 0x09
     6b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ba:	89 2b       	or	r24, r25
     6bc:	69 f7       	brne	.-38     	; 0x698 <nrf_reset_module+0xba>
     6be:	14 c0       	rjmp	.+40     	; 0x6e8 <nrf_reset_module+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c0:	6d 81       	ldd	r22, Y+5	; 0x05
     6c2:	7e 81       	ldd	r23, Y+6	; 0x06
     6c4:	8f 81       	ldd	r24, Y+7	; 0x07
     6c6:	98 85       	ldd	r25, Y+8	; 0x08
     6c8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	9a 87       	std	Y+10, r25	; 0x0a
     6d2:	89 87       	std	Y+9, r24	; 0x09
     6d4:	89 85       	ldd	r24, Y+9	; 0x09
     6d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d8:	9e 87       	std	Y+14, r25	; 0x0e
     6da:	8d 87       	std	Y+13, r24	; 0x0d
     6dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     6de:	9e 85       	ldd	r25, Y+14	; 0x0e
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <nrf_reset_module+0x102>
     6e4:	9e 87       	std	Y+14, r25	; 0x0e
     6e6:	8d 87       	std	Y+13, r24	; 0x0d
    _delay_ms(10);

    nrf_connect_state = NRF_STATE_DISCONNECT;
     6e8:	10 92 18 01 	sts	0x0118, r1
    return nrf_setup();
     6ec:	0e 94 81 03 	call	0x702	; 0x702 <nrf_setup>
}
     6f0:	2e 96       	adiw	r28, 0x0e	; 14
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <nrf_setup>:
 *
 * @param none
 * @return 0 on success, a negative value in case of an error.
 */
int8_t nrf_setup(void)
{
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	2f 97       	sbiw	r28, 0x0f	; 15
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
    uint8_t cnt;
    
    ble_reset_high();
     716:	85 e2       	ldi	r24, 0x25	; 37
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	25 e2       	ldi	r18, 0x25	; 37
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	20 61       	ori	r18, 0x10	; 16
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	a8 ec       	ldi	r26, 0xC8	; 200
     72e:	b2 e4       	ldi	r27, 0x42	; 66
     730:	8a 83       	std	Y+2, r24	; 0x02
     732:	9b 83       	std	Y+3, r25	; 0x03
     734:	ac 83       	std	Y+4, r26	; 0x04
     736:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	4a e7       	ldi	r20, 0x7A	; 122
     73e:	55 e4       	ldi	r21, 0x45	; 69
     740:	6a 81       	ldd	r22, Y+2	; 0x02
     742:	7b 81       	ldd	r23, Y+3	; 0x03
     744:	8c 81       	ldd	r24, Y+4	; 0x04
     746:	9d 81       	ldd	r25, Y+5	; 0x05
     748:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__mulsf3>
     74c:	dc 01       	movw	r26, r24
     74e:	cb 01       	movw	r24, r22
     750:	8e 83       	std	Y+6, r24	; 0x06
     752:	9f 83       	std	Y+7, r25	; 0x07
     754:	a8 87       	std	Y+8, r26	; 0x08
     756:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e8       	ldi	r20, 0x80	; 128
     75e:	5f e3       	ldi	r21, 0x3F	; 63
     760:	6e 81       	ldd	r22, Y+6	; 0x06
     762:	7f 81       	ldd	r23, Y+7	; 0x07
     764:	88 85       	ldd	r24, Y+8	; 0x08
     766:	99 85       	ldd	r25, Y+9	; 0x09
     768:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__cmpsf2>
     76c:	88 23       	and	r24, r24
     76e:	2c f4       	brge	.+10     	; 0x77a <nrf_setup+0x78>
		__ticks = 1;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9b 87       	std	Y+11, r25	; 0x0b
     776:	8a 87       	std	Y+10, r24	; 0x0a
     778:	3f c0       	rjmp	.+126    	; 0x7f8 <nrf_setup+0xf6>
	else if (__tmp > 65535)
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	3f ef       	ldi	r19, 0xFF	; 255
     77e:	4f e7       	ldi	r20, 0x7F	; 127
     780:	57 e4       	ldi	r21, 0x47	; 71
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	7f 81       	ldd	r23, Y+7	; 0x07
     786:	88 85       	ldd	r24, Y+8	; 0x08
     788:	99 85       	ldd	r25, Y+9	; 0x09
     78a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__gesf2>
     78e:	18 16       	cp	r1, r24
     790:	4c f5       	brge	.+82     	; 0x7e4 <nrf_setup+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e2       	ldi	r20, 0x20	; 32
     798:	51 e4       	ldi	r21, 0x41	; 65
     79a:	6a 81       	ldd	r22, Y+2	; 0x02
     79c:	7b 81       	ldd	r23, Y+3	; 0x03
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	9d 81       	ldd	r25, Y+5	; 0x05
     7a2:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	bc 01       	movw	r22, r24
     7ac:	cd 01       	movw	r24, r26
     7ae:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     7b2:	dc 01       	movw	r26, r24
     7b4:	cb 01       	movw	r24, r22
     7b6:	9b 87       	std	Y+11, r25	; 0x0b
     7b8:	8a 87       	std	Y+10, r24	; 0x0a
     7ba:	0f c0       	rjmp	.+30     	; 0x7da <nrf_setup+0xd8>
     7bc:	80 e9       	ldi	r24, 0x90	; 144
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	9d 87       	std	Y+13, r25	; 0x0d
     7c2:	8c 87       	std	Y+12, r24	; 0x0c
     7c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     7c6:	9d 85       	ldd	r25, Y+13	; 0x0d
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <nrf_setup+0xc6>
     7cc:	9d 87       	std	Y+13, r25	; 0x0d
     7ce:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     7d2:	9b 85       	ldd	r25, Y+11	; 0x0b
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	9b 87       	std	Y+11, r25	; 0x0b
     7d8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7da:	8a 85       	ldd	r24, Y+10	; 0x0a
     7dc:	9b 85       	ldd	r25, Y+11	; 0x0b
     7de:	89 2b       	or	r24, r25
     7e0:	69 f7       	brne	.-38     	; 0x7bc <nrf_setup+0xba>
     7e2:	14 c0       	rjmp	.+40     	; 0x80c <nrf_setup+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e4:	6e 81       	ldd	r22, Y+6	; 0x06
     7e6:	7f 81       	ldd	r23, Y+7	; 0x07
     7e8:	88 85       	ldd	r24, Y+8	; 0x08
     7ea:	99 85       	ldd	r25, Y+9	; 0x09
     7ec:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	9b 87       	std	Y+11, r25	; 0x0b
     7f6:	8a 87       	std	Y+10, r24	; 0x0a
     7f8:	8a 85       	ldd	r24, Y+10	; 0x0a
     7fa:	9b 85       	ldd	r25, Y+11	; 0x0b
     7fc:	9f 87       	std	Y+15, r25	; 0x0f
     7fe:	8e 87       	std	Y+14, r24	; 0x0e
     800:	8e 85       	ldd	r24, Y+14	; 0x0e
     802:	9f 85       	ldd	r25, Y+15	; 0x0f
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <nrf_setup+0x102>
     808:	9f 87       	std	Y+15, r25	; 0x0f
     80a:	8e 87       	std	Y+14, r24	; 0x0e
     * data sheet says RDYN signal is not valid until 62ms after nRF reset
     * pin goes high. Let's be on the safe side and wait 100ms.
     */
    _delay_ms(100);

    memset(&rx, 0, sizeof(rx));
     80c:	40 e2       	ldi	r20, 0x20	; 32
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	8f e9       	ldi	r24, 0x9F	; 159
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>
    nrf_receive(&rx);
     81c:	6f e9       	ldi	r22, 0x9F	; 159
     81e:	71 e0       	ldi	r23, 0x01	; 1
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nrf_transmit>

    if (rx.data[0] != NRF_EVT_DEVICE_STARTED || rx.data[2] != NRF_ERR_NO_ERROR) {
     828:	80 91 a1 01 	lds	r24, 0x01A1
     82c:	81 38       	cpi	r24, 0x81	; 129
     82e:	21 f4       	brne	.+8      	; 0x838 <nrf_setup+0x136>
     830:	80 91 a3 01 	lds	r24, 0x01A3
     834:	88 23       	and	r24, r24
     836:	11 f0       	breq	.+4      	; 0x83c <nrf_setup+0x13a>
        return -1;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	a4 c0       	rjmp	.+328    	; 0x984 <nrf_setup+0x282>
    }

    opmode = rx.data[1];
     83c:	80 91 a2 01 	lds	r24, 0x01A2
     840:	80 93 19 01 	sts	0x0119, r24
    pipes = rx.data[3];
     844:	80 91 a4 01 	lds	r24, 0x01A4
     848:	80 93 1a 01 	sts	0x011A, r24

    if (opmode != NRF_OPMODE_SETUP) {
     84c:	80 91 19 01 	lds	r24, 0x0119
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	11 f0       	breq	.+4      	; 0x858 <nrf_setup+0x156>
        return -2;
     854:	8e ef       	ldi	r24, 0xFE	; 254
     856:	96 c0       	rjmp	.+300    	; 0x984 <nrf_setup+0x282>
    }

    /* Send all setup data to nRF8001 */
    for (cnt = 0; cnt < NB_SETUP_MESSAGES; cnt++) {
     858:	19 82       	std	Y+1, r1	; 0x01
     85a:	3f c0       	rjmp	.+126    	; 0x8da <nrf_setup+0x1d8>
        memset(&rx, 0, sizeof(rx));
     85c:	40 e2       	ldi	r20, 0x20	; 32
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	8f e9       	ldi	r24, 0x9F	; 159
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>
        memcpy_P(&tx, &setup_data[cnt].data, sizeof(struct nrf_tx));
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	41 e2       	ldi	r20, 0x21	; 33
     874:	42 9f       	mul	r20, r18
     876:	c0 01       	movw	r24, r0
     878:	43 9f       	mul	r20, r19
     87a:	90 0d       	add	r25, r0
     87c:	11 24       	eor	r1, r1
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	81 5e       	subi	r24, 0xE1	; 225
     882:	9e 4f       	sbci	r25, 0xFE	; 254
     884:	40 e2       	ldi	r20, 0x20	; 32
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	bc 01       	movw	r22, r24
     88a:	83 e2       	ldi	r24, 0x23	; 35
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <memcpy_P>
        nrf_transmit(&tx, &rx);
     892:	6f e9       	ldi	r22, 0x9F	; 159
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	83 e2       	ldi	r24, 0x23	; 35
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nrf_transmit>

        if (rx.length == 0) {
     89e:	80 91 a0 01 	lds	r24, 0x01A0
     8a2:	88 23       	and	r24, r24
     8a4:	29 f4       	brne	.+10     	; 0x8b0 <nrf_setup+0x1ae>
            nrf_print_rx(&rx);
     8a6:	8f e9       	ldi	r24, 0x9F	; 159
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 ce 09 	call	0x139c	; 0x139c <nrf_print_rx>
            continue;
     8ae:	12 c0       	rjmp	.+36     	; 0x8d4 <nrf_setup+0x1d2>
        }

        nrf_print_rx(&rx);
     8b0:	8f e9       	ldi	r24, 0x9F	; 159
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 ce 09 	call	0x139c	; 0x139c <nrf_print_rx>

        /* Make sure transaction continue command response event is received */
        if (rx.data[0] != NRF_EVT_CMD_RESPONSE ||
     8b8:	80 91 a1 01 	lds	r24, 0x01A1
     8bc:	84 38       	cpi	r24, 0x84	; 132
     8be:	41 f4       	brne	.+16     	; 0x8d0 <nrf_setup+0x1ce>
            rx.data[1] != NRF_CMD_SETUP ||
     8c0:	80 91 a2 01 	lds	r24, 0x01A2
        }

        nrf_print_rx(&rx);

        /* Make sure transaction continue command response event is received */
        if (rx.data[0] != NRF_EVT_CMD_RESPONSE ||
     8c4:	86 30       	cpi	r24, 0x06	; 6
     8c6:	21 f4       	brne	.+8      	; 0x8d0 <nrf_setup+0x1ce>
            rx.data[1] != NRF_CMD_SETUP ||
            rx.data[2] != ACI_STATUS_TRANSACTION_CONTINUE)
     8c8:	80 91 a3 01 	lds	r24, 0x01A3

        nrf_print_rx(&rx);

        /* Make sure transaction continue command response event is received */
        if (rx.data[0] != NRF_EVT_CMD_RESPONSE ||
            rx.data[1] != NRF_CMD_SETUP ||
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	11 f0       	breq	.+4      	; 0x8d4 <nrf_setup+0x1d2>
            rx.data[2] != ACI_STATUS_TRANSACTION_CONTINUE)
        {
            return -3;
     8d0:	8d ef       	ldi	r24, 0xFD	; 253
     8d2:	58 c0       	rjmp	.+176    	; 0x984 <nrf_setup+0x282>
    if (opmode != NRF_OPMODE_SETUP) {
        return -2;
    }

    /* Send all setup data to nRF8001 */
    for (cnt = 0; cnt < NB_SETUP_MESSAGES; cnt++) {
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	83 31       	cpi	r24, 0x13	; 19
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <nrf_setup+0x1e0>
     8e0:	bd cf       	rjmp	.-134    	; 0x85c <nrf_setup+0x15a>
        }
    }
    
    /* Receive all setup command response events */
    do {
        memset(&rx, 0, sizeof(rx));
     8e2:	40 e2       	ldi	r20, 0x20	; 32
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	8f e9       	ldi	r24, 0x9F	; 159
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>
        nrf_receive(&rx);
     8f2:	6f e9       	ldi	r22, 0x9F	; 159
     8f4:	71 e0       	ldi	r23, 0x01	; 1
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nrf_transmit>
        nrf_print_rx(&rx);
     8fe:	8f e9       	ldi	r24, 0x9F	; 159
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 ce 09 	call	0x139c	; 0x139c <nrf_print_rx>
    } while (rx.data[0] == NRF_EVT_CMD_RESPONSE &&
     906:	80 91 a1 01 	lds	r24, 0x01A1
             rx.data[1] == NRF_CMD_SETUP &&
             rx.data[2] == ACI_STATUS_TRANSACTION_CONTINUE);
     90a:	84 38       	cpi	r24, 0x84	; 132
     90c:	41 f4       	brne	.+16     	; 0x91e <nrf_setup+0x21c>
    do {
        memset(&rx, 0, sizeof(rx));
        nrf_receive(&rx);
        nrf_print_rx(&rx);
    } while (rx.data[0] == NRF_EVT_CMD_RESPONSE &&
             rx.data[1] == NRF_CMD_SETUP &&
     90e:	80 91 a2 01 	lds	r24, 0x01A2
    /* Receive all setup command response events */
    do {
        memset(&rx, 0, sizeof(rx));
        nrf_receive(&rx);
        nrf_print_rx(&rx);
    } while (rx.data[0] == NRF_EVT_CMD_RESPONSE &&
     912:	86 30       	cpi	r24, 0x06	; 6
     914:	21 f4       	brne	.+8      	; 0x91e <nrf_setup+0x21c>
             rx.data[1] == NRF_CMD_SETUP &&
             rx.data[2] == ACI_STATUS_TRANSACTION_CONTINUE);
     916:	80 91 a3 01 	lds	r24, 0x01A3
    do {
        memset(&rx, 0, sizeof(rx));
        nrf_receive(&rx);
        nrf_print_rx(&rx);
    } while (rx.data[0] == NRF_EVT_CMD_RESPONSE &&
             rx.data[1] == NRF_CMD_SETUP &&
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	11 f3       	breq	.-60     	; 0x8e2 <nrf_setup+0x1e0>
             rx.data[2] == ACI_STATUS_TRANSACTION_CONTINUE);

    /* Make sure transaction complete command response event is received */
    if (rx.data[0] != NRF_EVT_CMD_RESPONSE ||
     91e:	80 91 a1 01 	lds	r24, 0x01A1
     922:	84 38       	cpi	r24, 0x84	; 132
     924:	41 f4       	brne	.+16     	; 0x936 <nrf_setup+0x234>
        rx.data[1] != NRF_CMD_SETUP ||
     926:	80 91 a2 01 	lds	r24, 0x01A2
    } while (rx.data[0] == NRF_EVT_CMD_RESPONSE &&
             rx.data[1] == NRF_CMD_SETUP &&
             rx.data[2] == ACI_STATUS_TRANSACTION_CONTINUE);

    /* Make sure transaction complete command response event is received */
    if (rx.data[0] != NRF_EVT_CMD_RESPONSE ||
     92a:	86 30       	cpi	r24, 0x06	; 6
     92c:	21 f4       	brne	.+8      	; 0x936 <nrf_setup+0x234>
        rx.data[1] != NRF_CMD_SETUP ||
        rx.data[2] != ACI_STATUS_TRANSACTION_COMPLETE)
     92e:	80 91 a3 01 	lds	r24, 0x01A3
             rx.data[1] == NRF_CMD_SETUP &&
             rx.data[2] == ACI_STATUS_TRANSACTION_CONTINUE);

    /* Make sure transaction complete command response event is received */
    if (rx.data[0] != NRF_EVT_CMD_RESPONSE ||
        rx.data[1] != NRF_CMD_SETUP ||
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	11 f0       	breq	.+4      	; 0x93a <nrf_setup+0x238>
        rx.data[2] != ACI_STATUS_TRANSACTION_COMPLETE)
    {
        return -4;
     936:	8c ef       	ldi	r24, 0xFC	; 252
     938:	25 c0       	rjmp	.+74     	; 0x984 <nrf_setup+0x282>
    }

    /* One last receive loop to wait for DeviceStartedEvent */
    do {
        memset(&rx, 0, sizeof(rx));
     93a:	40 e2       	ldi	r20, 0x20	; 32
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	8f e9       	ldi	r24, 0x9F	; 159
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>
        nrf_receive(&rx);
     94a:	6f e9       	ldi	r22, 0x9F	; 159
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nrf_transmit>
    } while (rx.data[0] != NRF_EVT_DEVICE_STARTED);
     956:	80 91 a1 01 	lds	r24, 0x01A1
     95a:	81 38       	cpi	r24, 0x81	; 129
     95c:	71 f7       	brne	.-36     	; 0x93a <nrf_setup+0x238>

    nrf_print_rx(&rx);
     95e:	8f e9       	ldi	r24, 0x9F	; 159
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 ce 09 	call	0x139c	; 0x139c <nrf_print_rx>

    if (rx.data[2] != NRF_ERR_NO_ERROR) {
     966:	80 91 a3 01 	lds	r24, 0x01A3
     96a:	88 23       	and	r24, r24
     96c:	11 f0       	breq	.+4      	; 0x972 <nrf_setup+0x270>
        return -5;
     96e:	8b ef       	ldi	r24, 0xFB	; 251
     970:	09 c0       	rjmp	.+18     	; 0x984 <nrf_setup+0x282>
    }

    opmode = rx.data[1];
     972:	80 91 a2 01 	lds	r24, 0x01A2
     976:	80 93 19 01 	sts	0x0119, r24
    pipes = rx.data[3];
     97a:	80 91 a4 01 	lds	r24, 0x01A4
     97e:	80 93 1a 01 	sts	0x011A, r24

    led_setup_on();
    
    return 0;
     982:	80 e0       	ldi	r24, 0x00	; 0
}
     984:	2f 96       	adiw	r28, 0x0f	; 15
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <nrf_advertise>:
 * @param none
 * @return none
 */
void
nrf_advertise(void)
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 d0       	rcall	.+0      	; 0x99c <nrf_advertise+0x6>
     99c:	00 d0       	rcall	.+0      	; 0x99e <nrf_advertise+0x8>
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
    data16_t timeout;
    data16_t advival;

    memset(&tx, 0, sizeof(tx));
     9a2:	40 e2       	ldi	r20, 0x20	; 32
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	83 e2       	ldi	r24, 0x23	; 35
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>

    timeout.word = 0;
     9b2:	1a 82       	std	Y+2, r1	; 0x02
     9b4:	19 82       	std	Y+1, r1	; 0x01
    advival.word = 128;
     9b6:	80 e8       	ldi	r24, 0x80	; 128
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	9c 83       	std	Y+4, r25	; 0x04
     9bc:	8b 83       	std	Y+3, r24	; 0x03

    tx.length = 5;
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	80 93 23 01 	sts	0x0123, r24
    tx.command = NRF_CMD_CONNECT;
     9c4:	8f e0       	ldi	r24, 0x0F	; 15
     9c6:	80 93 24 01 	sts	0x0124, r24
    /* send LSB first */
    tx.data[0] = timeout.lsb;
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	80 93 25 01 	sts	0x0125, r24
    tx.data[1] = timeout.msb;
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	80 93 26 01 	sts	0x0126, r24
    tx.data[2] = advival.lsb;
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	80 93 27 01 	sts	0x0127, r24
    tx.data[3] = advival.msb;
     9dc:	8c 81       	ldd	r24, Y+4	; 0x04
     9de:	80 93 28 01 	sts	0x0128, r24

    nrf_send(&tx);
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	83 e2       	ldi	r24, 0x23	; 35
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nrf_transmit>
}
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <nrf_tx_map_pipes>:
 * @param none
 * @return none
 */
void
nrf_tx_map_pipes(void)
{
     9fc:	2f 92       	push	r2
     9fe:	3f 92       	push	r3
     a00:	4f 92       	push	r4
     a02:	5f 92       	push	r5
     a04:	6f 92       	push	r6
     a06:	7f 92       	push	r7
     a08:	8f 92       	push	r8
     a0a:	9f 92       	push	r9
     a0c:	af 92       	push	r10
     a0e:	bf 92       	push	r11
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	1f 92       	push	r1
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;

    for (i = 0; i < NUMBER_OF_PIPES; i++) {
     a26:	19 82       	std	Y+1, r1	; 0x01
     a28:	67 c0       	rjmp	.+206    	; 0xaf8 <nrf_tx_map_pipes+0xfc>
        if (service_pipe_map[i].store == ACI_STORE_LOCAL &&
     a2a:	e9 81       	ldd	r30, Y+1	; 0x01
     a2c:	ae 2f       	mov	r26, r30
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	fd 01       	movw	r30, r26
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	ea 0f       	add	r30, r26
     a38:	fb 1f       	adc	r31, r27
     a3a:	e0 50       	subi	r30, 0x00	; 0
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	e0 81       	ld	r30, Z
     a40:	e1 30       	cpi	r30, 0x01	; 1
     a42:	09 f0       	breq	.+2      	; 0xa46 <nrf_tx_map_pipes+0x4a>
     a44:	56 c0       	rjmp	.+172    	; 0xaf2 <nrf_tx_map_pipes+0xf6>
            service_pipe_map[i].type == ACI_TX)
     a46:	e9 81       	ldd	r30, Y+1	; 0x01
     a48:	ae 2f       	mov	r26, r30
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	fd 01       	movw	r30, r26
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ea 0f       	add	r30, r26
     a54:	fb 1f       	adc	r31, r27
     a56:	ef 5f       	subi	r30, 0xFF	; 255
     a58:	fe 4f       	sbci	r31, 0xFE	; 254
     a5a:	01 90       	ld	r0, Z+
     a5c:	f0 81       	ld	r31, Z
     a5e:	e0 2d       	mov	r30, r0
nrf_tx_map_pipes(void)
{
    uint8_t i;

    for (i = 0; i < NUMBER_OF_PIPES; i++) {
        if (service_pipe_map[i].store == ACI_STORE_LOCAL &&
     a60:	32 97       	sbiw	r30, 0x02	; 2
     a62:	09 f0       	breq	.+2      	; 0xa66 <nrf_tx_map_pipes+0x6a>
     a64:	46 c0       	rjmp	.+140    	; 0xaf2 <nrf_tx_map_pipes+0xf6>
            service_pipe_map[i].type == ACI_TX)
        {
            nrf_tx_pipe_map |= 1 << (i + 1);
     a66:	e9 81       	ldd	r30, Y+1	; 0x01
     a68:	ee 2f       	mov	r30, r30
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	df 01       	movw	r26, r30
     a6e:	11 96       	adiw	r26, 0x01	; 1
     a70:	e1 e0       	ldi	r30, 0x01	; 1
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <nrf_tx_map_pipes+0x7e>
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	aa 95       	dec	r26
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <nrf_tx_map_pipes+0x7a>
     a7e:	1f 01       	movw	r2, r30
     a80:	ef 2f       	mov	r30, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ee 0b       	sbc	r30, r30
     a86:	4e 2e       	mov	r4, r30
     a88:	5e 2e       	mov	r5, r30
     a8a:	6e 2e       	mov	r6, r30
     a8c:	7e 2e       	mov	r7, r30
     a8e:	8e 2e       	mov	r8, r30
     a90:	9e 2e       	mov	r9, r30
     a92:	a0 90 97 01 	lds	r10, 0x0197
     a96:	b0 90 98 01 	lds	r11, 0x0198
     a9a:	c0 90 99 01 	lds	r12, 0x0199
     a9e:	d0 90 9a 01 	lds	r13, 0x019A
     aa2:	e0 90 9b 01 	lds	r14, 0x019B
     aa6:	f0 90 9c 01 	lds	r15, 0x019C
     aaa:	00 91 9d 01 	lds	r16, 0x019D
     aae:	10 91 9e 01 	lds	r17, 0x019E
     ab2:	22 2d       	mov	r18, r2
     ab4:	2a 29       	or	r18, r10
     ab6:	33 2d       	mov	r19, r3
     ab8:	3b 29       	or	r19, r11
     aba:	44 2d       	mov	r20, r4
     abc:	4c 29       	or	r20, r12
     abe:	55 2d       	mov	r21, r5
     ac0:	5d 29       	or	r21, r13
     ac2:	66 2d       	mov	r22, r6
     ac4:	6e 29       	or	r22, r14
     ac6:	77 2d       	mov	r23, r7
     ac8:	7f 29       	or	r23, r15
     aca:	88 2d       	mov	r24, r8
     acc:	80 2b       	or	r24, r16
     ace:	99 2d       	mov	r25, r9
     ad0:	91 2b       	or	r25, r17
     ad2:	20 93 97 01 	sts	0x0197, r18
     ad6:	30 93 98 01 	sts	0x0198, r19
     ada:	40 93 99 01 	sts	0x0199, r20
     ade:	50 93 9a 01 	sts	0x019A, r21
     ae2:	60 93 9b 01 	sts	0x019B, r22
     ae6:	70 93 9c 01 	sts	0x019C, r23
     aea:	80 93 9d 01 	sts	0x019D, r24
     aee:	90 93 9e 01 	sts	0x019E, r25
void
nrf_tx_map_pipes(void)
{
    uint8_t i;

    for (i = 0; i < NUMBER_OF_PIPES; i++) {
     af2:	e9 81       	ldd	r30, Y+1	; 0x01
     af4:	ef 5f       	subi	r30, 0xFF	; 255
     af6:	e9 83       	std	Y+1, r30	; 0x01
     af8:	e9 81       	ldd	r30, Y+1	; 0x01
     afa:	e2 30       	cpi	r30, 0x02	; 2
     afc:	08 f4       	brcc	.+2      	; 0xb00 <__stack+0x1>
     afe:	95 cf       	rjmp	.-214    	; 0xa2a <nrf_tx_map_pipes+0x2e>
            service_pipe_map[i].type == ACI_TX)
        {
            nrf_tx_pipe_map |= 1 << (i + 1);
        }
    }
}
     b00:	0f 90       	pop	r0
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	9f 90       	pop	r9
     b18:	8f 90       	pop	r8
     b1a:	7f 90       	pop	r7
     b1c:	6f 90       	pop	r6
     b1e:	5f 90       	pop	r5
     b20:	4f 90       	pop	r4
     b22:	3f 90       	pop	r3
     b24:	2f 90       	pop	r2
     b26:	08 95       	ret

00000b28 <nrf_close_tx_pipes>:
 * @param none
 * @return none
 */
void
nrf_close_tx_pipes(void)
{
     b28:	2f 92       	push	r2
     b2a:	3f 92       	push	r3
     b2c:	4f 92       	push	r4
     b2e:	5f 92       	push	r5
     b30:	6f 92       	push	r6
     b32:	7f 92       	push	r7
     b34:	8f 92       	push	r8
     b36:	9f 92       	push	r9
     b38:	af 92       	push	r10
     b3a:	bf 92       	push	r11
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	61 97       	sbiw	r28, 0x11	; 17
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
    uint8_t i;

    pipes_open &= ~(nrf_tx_pipe_map);
     b5c:	20 91 97 01 	lds	r18, 0x0197
     b60:	30 91 98 01 	lds	r19, 0x0198
     b64:	40 91 99 01 	lds	r20, 0x0199
     b68:	50 91 9a 01 	lds	r21, 0x019A
     b6c:	60 91 9b 01 	lds	r22, 0x019B
     b70:	70 91 9c 01 	lds	r23, 0x019C
     b74:	80 91 9d 01 	lds	r24, 0x019D
     b78:	90 91 9e 01 	lds	r25, 0x019E
     b7c:	22 2e       	mov	r2, r18
     b7e:	20 94       	com	r2
     b80:	33 2e       	mov	r3, r19
     b82:	30 94       	com	r3
     b84:	44 2e       	mov	r4, r20
     b86:	40 94       	com	r4
     b88:	55 2e       	mov	r5, r21
     b8a:	50 94       	com	r5
     b8c:	66 2e       	mov	r6, r22
     b8e:	60 94       	com	r6
     b90:	77 2e       	mov	r7, r23
     b92:	70 94       	com	r7
     b94:	88 2e       	mov	r8, r24
     b96:	80 94       	com	r8
     b98:	99 2e       	mov	r9, r25
     b9a:	90 94       	com	r9
     b9c:	20 91 1b 01 	lds	r18, 0x011B
     ba0:	30 91 1c 01 	lds	r19, 0x011C
     ba4:	40 91 1d 01 	lds	r20, 0x011D
     ba8:	50 91 1e 01 	lds	r21, 0x011E
     bac:	60 91 1f 01 	lds	r22, 0x011F
     bb0:	70 91 20 01 	lds	r23, 0x0120
     bb4:	80 91 21 01 	lds	r24, 0x0121
     bb8:	90 91 22 01 	lds	r25, 0x0122
     bbc:	a2 2c       	mov	r10, r2
     bbe:	a2 22       	and	r10, r18
     bc0:	b3 2c       	mov	r11, r3
     bc2:	b3 22       	and	r11, r19
     bc4:	c4 2c       	mov	r12, r4
     bc6:	c4 22       	and	r12, r20
     bc8:	d5 2c       	mov	r13, r5
     bca:	d5 22       	and	r13, r21
     bcc:	e6 2c       	mov	r14, r6
     bce:	e6 22       	and	r14, r22
     bd0:	f7 2c       	mov	r15, r7
     bd2:	f7 22       	and	r15, r23
     bd4:	08 2d       	mov	r16, r8
     bd6:	08 23       	and	r16, r24
     bd8:	19 2d       	mov	r17, r9
     bda:	19 23       	and	r17, r25
     bdc:	a0 92 1b 01 	sts	0x011B, r10
     be0:	b0 92 1c 01 	sts	0x011C, r11
     be4:	c0 92 1d 01 	sts	0x011D, r12
     be8:	d0 92 1e 01 	sts	0x011E, r13
     bec:	e0 92 1f 01 	sts	0x011F, r14
     bf0:	f0 92 20 01 	sts	0x0120, r15
     bf4:	00 93 21 01 	sts	0x0121, r16
     bf8:	10 93 22 01 	sts	0x0122, r17
    uart_print_pgm(string_pipes_open);
     bfc:	83 ed       	ldi	r24, 0xD3	; 211
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 65 0b 	call	0x16ca	; 0x16ca <uart_print_pgm>
    for (i = 1; i <= NUMBER_OF_PIPES; i++) {
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	59 c0       	rjmp	.+178    	; 0xcbc <nrf_close_tx_pipes+0x194>
        if (pipes_open & (1 << i)) {
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <nrf_close_tx_pipes+0xf2>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	2a 95       	dec	r18
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <nrf_close_tx_pipes+0xee>
     c1e:	9b 83       	std	Y+3, r25	; 0x03
     c20:	8a 83       	std	Y+2, r24	; 0x02
     c22:	89 2f       	mov	r24, r25
     c24:	88 0f       	add	r24, r24
     c26:	88 0b       	sbc	r24, r24
     c28:	8c 83       	std	Y+4, r24	; 0x04
     c2a:	8d 83       	std	Y+5, r24	; 0x05
     c2c:	8e 83       	std	Y+6, r24	; 0x06
     c2e:	8f 83       	std	Y+7, r24	; 0x07
     c30:	88 87       	std	Y+8, r24	; 0x08
     c32:	89 87       	std	Y+9, r24	; 0x09
     c34:	20 91 1b 01 	lds	r18, 0x011B
     c38:	30 91 1c 01 	lds	r19, 0x011C
     c3c:	40 91 1d 01 	lds	r20, 0x011D
     c40:	50 91 1e 01 	lds	r21, 0x011E
     c44:	60 91 1f 01 	lds	r22, 0x011F
     c48:	70 91 20 01 	lds	r23, 0x0120
     c4c:	80 91 21 01 	lds	r24, 0x0121
     c50:	90 91 22 01 	lds	r25, 0x0122
     c54:	ea 81       	ldd	r30, Y+2	; 0x02
     c56:	e2 23       	and	r30, r18
     c58:	ea 87       	std	Y+10, r30	; 0x0a
     c5a:	eb 81       	ldd	r30, Y+3	; 0x03
     c5c:	e3 23       	and	r30, r19
     c5e:	eb 87       	std	Y+11, r30	; 0x0b
     c60:	ec 81       	ldd	r30, Y+4	; 0x04
     c62:	e4 23       	and	r30, r20
     c64:	ec 87       	std	Y+12, r30	; 0x0c
     c66:	ed 81       	ldd	r30, Y+5	; 0x05
     c68:	e5 23       	and	r30, r21
     c6a:	ed 87       	std	Y+13, r30	; 0x0d
     c6c:	ee 81       	ldd	r30, Y+6	; 0x06
     c6e:	e6 23       	and	r30, r22
     c70:	ee 87       	std	Y+14, r30	; 0x0e
     c72:	ef 81       	ldd	r30, Y+7	; 0x07
     c74:	e7 23       	and	r30, r23
     c76:	ef 87       	std	Y+15, r30	; 0x0f
     c78:	e8 85       	ldd	r30, Y+8	; 0x08
     c7a:	e8 23       	and	r30, r24
     c7c:	e8 8b       	std	Y+16, r30	; 0x10
     c7e:	e9 85       	ldd	r30, Y+9	; 0x09
     c80:	e9 23       	and	r30, r25
     c82:	e9 8b       	std	Y+17, r30	; 0x11
     c84:	2a 85       	ldd	r18, Y+10	; 0x0a
     c86:	3b 85       	ldd	r19, Y+11	; 0x0b
     c88:	4c 85       	ldd	r20, Y+12	; 0x0c
     c8a:	5d 85       	ldd	r21, Y+13	; 0x0d
     c8c:	6e 85       	ldd	r22, Y+14	; 0x0e
     c8e:	7f 85       	ldd	r23, Y+15	; 0x0f
     c90:	88 89       	ldd	r24, Y+16	; 0x10
     c92:	99 89       	ldd	r25, Y+17	; 0x11
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	0e 94 35 0c 	call	0x186a	; 0x186a <__cmpdi2_s8>
     c9a:	69 f0       	breq	.+26     	; 0xcb6 <nrf_close_tx_pipes+0x18e>
            uart_putint(i, 1);
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 98 0b 	call	0x1730	; 0x1730 <uart_putint>
            uart_putchar(' ');
     cb0:	80 e2       	ldi	r24, 0x20	; 32
     cb2:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
{
    uint8_t i;

    pipes_open &= ~(nrf_tx_pipe_map);
    uart_print_pgm(string_pipes_open);
    for (i = 1; i <= NUMBER_OF_PIPES; i++) {
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	83 30       	cpi	r24, 0x03	; 3
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <nrf_close_tx_pipes+0x19c>
     cc2:	a3 cf       	rjmp	.-186    	; 0xc0a <nrf_close_tx_pipes+0xe2>
        if (pipes_open & (1 << i)) {
            uart_putint(i, 1);
            uart_putchar(' ');
        }
    }
    uart_newline();
     cc4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <uart_newline>
}
     cc8:	61 96       	adiw	r28, 0x11	; 17
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	bf 90       	pop	r11
     ce6:	af 90       	pop	r10
     ce8:	9f 90       	pop	r9
     cea:	8f 90       	pop	r8
     cec:	7f 90       	pop	r7
     cee:	6f 90       	pop	r6
     cf0:	5f 90       	pop	r5
     cf2:	4f 90       	pop	r4
     cf4:	3f 90       	pop	r3
     cf6:	2f 90       	pop	r2
     cf8:	08 95       	ret

00000cfa <nrf_transmit>:
 * @return 0
 *
 */
int8_t
nrf_transmit(struct nrf_tx *tx, struct nrf_rx *rx)
{
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	63 97       	sbiw	r28, 0x13	; 19
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	99 8b       	std	Y+17, r25	; 0x11
     d14:	88 8b       	std	Y+16, r24	; 0x10
     d16:	7b 8b       	std	Y+19, r23	; 0x13
     d18:	6a 8b       	std	Y+18, r22	; 0x12
    uint8_t i;

    reqn_set_low();
     d1a:	85 e2       	ldi	r24, 0x25	; 37
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	25 e2       	ldi	r18, 0x25	; 37
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	f9 01       	movw	r30, r18
     d24:	20 81       	ld	r18, Z
     d26:	2e 7f       	andi	r18, 0xFE	; 254
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
    while (rdyn_is_high()) {
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <nrf_transmit+0x38>
        /* wait */
    	//uart_putchar('a');
    	nrf_print_temperature();
     d2e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <nrf_print_temperature>
nrf_transmit(struct nrf_tx *tx, struct nrf_rx *rx)
{
    uint8_t i;

    reqn_set_low();
    while (rdyn_is_high()) {
     d32:	83 e2       	ldi	r24, 0x23	; 35
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	80 81       	ld	r24, Z
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	88 70       	andi	r24, 0x08	; 8
     d40:	99 27       	eor	r25, r25
     d42:	89 2b       	or	r24, r25
     d44:	a1 f7       	brne	.-24     	; 0xd2e <nrf_transmit+0x34>

    /*
     * Check if given tx struct is NULL and only rx is of interest.
     * Use global dummy_tx struct (all fields zero) for sending.
     */
    if (tx == NULL) {
     d46:	88 89       	ldd	r24, Y+16	; 0x10
     d48:	99 89       	ldd	r25, Y+17	; 0x11
     d4a:	89 2b       	or	r24, r25
     d4c:	21 f4       	brne	.+8      	; 0xd56 <nrf_transmit+0x5c>
        tx = &dummy_tx;
     d4e:	83 e4       	ldi	r24, 0x43	; 67
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	99 8b       	std	Y+17, r25	; 0x11
     d54:	88 8b       	std	Y+16, r24	; 0x10

    /*
     * Check if given rx struct is NULL and only tx is of interst.
     * Receive into global dummy_rx structure and ignore it.
     */
    if (rx == NULL) {
     d56:	8a 89       	ldd	r24, Y+18	; 0x12
     d58:	9b 89       	ldd	r25, Y+19	; 0x13
     d5a:	89 2b       	or	r24, r25
     d5c:	61 f4       	brne	.+24     	; 0xd76 <nrf_transmit+0x7c>
        memset(&dummy_rx, 0, sizeof(dummy_rx));
     d5e:	40 e2       	ldi	r20, 0x20	; 32
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	83 e6       	ldi	r24, 0x63	; 99
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>
        rx = &dummy_rx;
     d6e:	83 e6       	ldi	r24, 0x63	; 99
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	9b 8b       	std	Y+19, r25	; 0x13
     d74:	8a 8b       	std	Y+18, r24	; 0x12
     * Each ACI transmission consists of at least two bytes (packet length
     * and opcode). Each receiving package also has at least two bytes
     * (debug byte and receiving length, which might be zero if there is
     * no actual data available).
     */
    rx->debug  = spi_transmit(tx->length);
     d76:	88 89       	ldd	r24, Y+16	; 0x10
     d78:	99 89       	ldd	r25, Y+17	; 0x11
     d7a:	fc 01       	movw	r30, r24
     d7c:	80 81       	ld	r24, Z
     d7e:	0e 94 99 0a 	call	0x1532	; 0x1532 <spi_transmit>
     d82:	28 2f       	mov	r18, r24
     d84:	8a 89       	ldd	r24, Y+18	; 0x12
     d86:	9b 89       	ldd	r25, Y+19	; 0x13
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
    rx->length = spi_transmit(tx->command);
     d8c:	88 89       	ldd	r24, Y+16	; 0x10
     d8e:	99 89       	ldd	r25, Y+17	; 0x11
     d90:	fc 01       	movw	r30, r24
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	0e 94 99 0a 	call	0x1532	; 0x1532 <spi_transmit>
     d98:	28 2f       	mov	r18, r24
     d9a:	8a 89       	ldd	r24, Y+18	; 0x12
     d9c:	9b 89       	ldd	r25, Y+19	; 0x13
     d9e:	fc 01       	movw	r30, r24
     da0:	21 83       	std	Z+1, r18	; 0x01
    
    /* Send and receive data while there is data is to send or receive */
    for (i = 0; i < tx->length - 1 || i < rx->length; i++) {
     da2:	19 82       	std	Y+1, r1	; 0x01
     da4:	1a c0       	rjmp	.+52     	; 0xdda <nrf_transmit+0xe0>
        rx->data[i] = spi_transmit(tx->data[i]);
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	08 2f       	mov	r16, r24
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	28 89       	ldd	r18, Y+16	; 0x10
     db4:	39 89       	ldd	r19, Y+17	; 0x11
     db6:	82 0f       	add	r24, r18
     db8:	93 1f       	adc	r25, r19
     dba:	02 96       	adiw	r24, 0x02	; 2
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	0e 94 99 0a 	call	0x1532	; 0x1532 <spi_transmit>
     dc4:	28 2f       	mov	r18, r24
     dc6:	8a 89       	ldd	r24, Y+18	; 0x12
     dc8:	9b 89       	ldd	r25, Y+19	; 0x13
     dca:	80 0f       	add	r24, r16
     dcc:	91 1f       	adc	r25, r17
     dce:	02 96       	adiw	r24, 0x02	; 2
     dd0:	fc 01       	movw	r30, r24
     dd2:	20 83       	st	Z, r18
     */
    rx->debug  = spi_transmit(tx->length);
    rx->length = spi_transmit(tx->command);
    
    /* Send and receive data while there is data is to send or receive */
    for (i = 0; i < tx->length - 1 || i < rx->length; i++) {
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	8f 5f       	subi	r24, 0xFF	; 255
     dd8:	89 83       	std	Y+1, r24	; 0x01
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	88 89       	ldd	r24, Y+16	; 0x10
     de2:	99 89       	ldd	r25, Y+17	; 0x11
     de4:	fc 01       	movw	r30, r24
     de6:	80 81       	ld	r24, Z
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	28 17       	cp	r18, r24
     df0:	39 07       	cpc	r19, r25
     df2:	cc f2       	brlt	.-78     	; 0xda6 <nrf_transmit+0xac>
     df4:	8a 89       	ldd	r24, Y+18	; 0x12
     df6:	9b 89       	ldd	r25, Y+19	; 0x13
     df8:	fc 01       	movw	r30, r24
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	89 17       	cp	r24, r25
     e00:	90 f2       	brcs	.-92     	; 0xda6 <nrf_transmit+0xac>
        rx->data[i] = spi_transmit(tx->data[i]);
    }

    reqn_set_high();
     e02:	85 e2       	ldi	r24, 0x25	; 37
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	25 e2       	ldi	r18, 0x25	; 37
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	f9 01       	movw	r30, r18
     e0c:	20 81       	ld	r18, Z
     e0e:	21 60       	ori	r18, 0x01	; 1
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18
    while (rdyn_is_low()) {
     e14:	00 00       	nop
     e16:	83 e2       	ldi	r24, 0x23	; 35
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	fc 01       	movw	r30, r24
     e1c:	80 81       	ld	r24, Z
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	88 70       	andi	r24, 0x08	; 8
     e24:	99 27       	eor	r25, r25
     e26:	89 2b       	or	r24, r25
     e28:	b1 f3       	breq	.-20     	; 0xe16 <nrf_transmit+0x11c>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 e8       	ldi	r26, 0x80	; 128
     e30:	bf e3       	ldi	r27, 0x3F	; 63
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	9b 83       	std	Y+3, r25	; 0x03
     e36:	ac 83       	std	Y+4, r26	; 0x04
     e38:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	4a e7       	ldi	r20, 0x7A	; 122
     e40:	55 e4       	ldi	r21, 0x45	; 69
     e42:	6a 81       	ldd	r22, Y+2	; 0x02
     e44:	7b 81       	ldd	r23, Y+3	; 0x03
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	9d 81       	ldd	r25, Y+5	; 0x05
     e4a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	8e 83       	std	Y+6, r24	; 0x06
     e54:	9f 83       	std	Y+7, r25	; 0x07
     e56:	a8 87       	std	Y+8, r26	; 0x08
     e58:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	6e 81       	ldd	r22, Y+6	; 0x06
     e64:	7f 81       	ldd	r23, Y+7	; 0x07
     e66:	88 85       	ldd	r24, Y+8	; 0x08
     e68:	99 85       	ldd	r25, Y+9	; 0x09
     e6a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__cmpsf2>
     e6e:	88 23       	and	r24, r24
     e70:	2c f4       	brge	.+10     	; 0xe7c <nrf_transmit+0x182>
		__ticks = 1;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9b 87       	std	Y+11, r25	; 0x0b
     e78:	8a 87       	std	Y+10, r24	; 0x0a
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <nrf_transmit+0x200>
	else if (__tmp > 65535)
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	4f e7       	ldi	r20, 0x7F	; 127
     e82:	57 e4       	ldi	r21, 0x47	; 71
     e84:	6e 81       	ldd	r22, Y+6	; 0x06
     e86:	7f 81       	ldd	r23, Y+7	; 0x07
     e88:	88 85       	ldd	r24, Y+8	; 0x08
     e8a:	99 85       	ldd	r25, Y+9	; 0x09
     e8c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__gesf2>
     e90:	18 16       	cp	r1, r24
     e92:	4c f5       	brge	.+82     	; 0xee6 <nrf_transmit+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e2       	ldi	r20, 0x20	; 32
     e9a:	51 e4       	ldi	r21, 0x41	; 65
     e9c:	6a 81       	ldd	r22, Y+2	; 0x02
     e9e:	7b 81       	ldd	r23, Y+3	; 0x03
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9b 87       	std	Y+11, r25	; 0x0b
     eba:	8a 87       	std	Y+10, r24	; 0x0a
     ebc:	0f c0       	rjmp	.+30     	; 0xedc <nrf_transmit+0x1e2>
     ebe:	80 e9       	ldi	r24, 0x90	; 144
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	9d 87       	std	Y+13, r25	; 0x0d
     ec4:	8c 87       	std	Y+12, r24	; 0x0c
     ec6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec8:	9d 85       	ldd	r25, Y+13	; 0x0d
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <nrf_transmit+0x1d0>
     ece:	9d 87       	std	Y+13, r25	; 0x0d
     ed0:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ed4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	9b 87       	std	Y+11, r25	; 0x0b
     eda:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     edc:	8a 85       	ldd	r24, Y+10	; 0x0a
     ede:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee0:	89 2b       	or	r24, r25
     ee2:	69 f7       	brne	.-38     	; 0xebe <nrf_transmit+0x1c4>
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <nrf_transmit+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee6:	6e 81       	ldd	r22, Y+6	; 0x06
     ee8:	7f 81       	ldd	r23, Y+7	; 0x07
     eea:	88 85       	ldd	r24, Y+8	; 0x08
     eec:	99 85       	ldd	r25, Y+9	; 0x09
     eee:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9b 87       	std	Y+11, r25	; 0x0b
     ef8:	8a 87       	std	Y+10, r24	; 0x0a
     efa:	8a 85       	ldd	r24, Y+10	; 0x0a
     efc:	9b 85       	ldd	r25, Y+11	; 0x0b
     efe:	9f 87       	std	Y+15, r25	; 0x0f
     f00:	8e 87       	std	Y+14, r24	; 0x0e
     f02:	8e 85       	ldd	r24, Y+14	; 0x0e
     f04:	9f 85       	ldd	r25, Y+15	; 0x0f
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <nrf_transmit+0x20c>
     f0a:	9f 87       	std	Y+15, r25	; 0x0f
     f0c:	8e 87       	std	Y+14, r24	; 0x0e
     * Experienced some timing issues, i.e. empty events read after requesting
     * data (simplest case reading temperature) without a small delay here.
     */
    _delay_ms(1);

    return 0;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
}
     f10:	63 96       	adiw	r28, 0x13	; 19
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	08 95       	ret

00000f26 <nrf_parse>:
 * @param rx Data received from nRF8001 module
 * @return none
 */
void
nrf_parse(struct nrf_rx *rx)
{
     f26:	2f 92       	push	r2
     f28:	3f 92       	push	r3
     f2a:	4f 92       	push	r4
     f2c:	5f 92       	push	r5
     f2e:	6f 92       	push	r6
     f30:	7f 92       	push	r7
     f32:	8f 92       	push	r8
     f34:	9f 92       	push	r9
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	63 97       	sbiw	r28, 0x13	; 19
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	9b 83       	std	Y+3, r25	; 0x03
     f5c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;

    if (rx->length == 0) {
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	fc 01       	movw	r30, r24
     f64:	81 81       	ldd	r24, Z+1	; 0x01
     f66:	88 23       	and	r24, r24
     f68:	09 f4       	brne	.+2      	; 0xf6c <nrf_parse+0x46>
        return;
     f6a:	92 c1       	rjmp	.+804    	; 0x1290 <nrf_parse+0x36a>
    }

    switch (rx->data[0]) {
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	fc 01       	movw	r30, r24
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	86 38       	cpi	r24, 0x86	; 134
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <nrf_parse+0x5a>
     f7e:	5e c0       	rjmp	.+188    	; 0x103c <nrf_parse+0x116>
     f80:	87 38       	cpi	r24, 0x87	; 135
     f82:	91 05       	cpc	r25, r1
     f84:	3c f4       	brge	.+14     	; 0xf94 <nrf_parse+0x6e>
     f86:	84 38       	cpi	r24, 0x84	; 132
     f88:	91 05       	cpc	r25, r1
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <nrf_parse+0x80>
     f8c:	85 38       	cpi	r24, 0x85	; 133
     f8e:	91 05       	cpc	r25, r1
     f90:	e1 f0       	breq	.+56     	; 0xfca <nrf_parse+0xa4>
     f92:	5d c1       	rjmp	.+698    	; 0x124e <nrf_parse+0x328>
     f94:	88 38       	cpi	r24, 0x88	; 136
     f96:	91 05       	cpc	r25, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <nrf_parse+0x76>
     f9a:	55 c0       	rjmp	.+170    	; 0x1046 <nrf_parse+0x120>
     f9c:	8c 38       	cpi	r24, 0x8C	; 140
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <nrf_parse+0x7e>
     fa2:	23 c1       	rjmp	.+582    	; 0x11ea <nrf_parse+0x2c4>
     fa4:	54 c1       	rjmp	.+680    	; 0x124e <nrf_parse+0x328>
        case NRF_EVT_CMD_RESPONSE:
            if (rx->data[1] == NRF_CMD_CONNECT &&
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	fc 01       	movw	r30, r24
     fac:	83 81       	ldd	r24, Z+3	; 0x03
     fae:	8f 30       	cpi	r24, 0x0F	; 15
     fb0:	59 f4       	brne	.+22     	; 0xfc8 <nrf_parse+0xa2>
                rx->data[2] == NRF_ERR_NO_ERROR)
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	fc 01       	movw	r30, r24
     fb8:	84 81       	ldd	r24, Z+4	; 0x04
        return;
    }

    switch (rx->data[0]) {
        case NRF_EVT_CMD_RESPONSE:
            if (rx->data[1] == NRF_CMD_CONNECT &&
     fba:	88 23       	and	r24, r24
     fbc:	29 f4       	brne	.+10     	; 0xfc8 <nrf_parse+0xa2>
                rx->data[2] == NRF_ERR_NO_ERROR)
            {
                uart_print_pgm(string_advertising);
     fbe:	8c ea       	ldi	r24, 0xAC	; 172
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 65 0b 	call	0x16ca	; 0x16ca <uart_print_pgm>
            }
            break;
     fc6:	64 c1       	rjmp	.+712    	; 0x1290 <nrf_parse+0x36a>
     fc8:	63 c1       	rjmp	.+710    	; 0x1290 <nrf_parse+0x36a>

        case NRF_EVT_CONNECTED:
            nrf_connect_state = NRF_STATE_CONNECTED;
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	80 93 18 01 	sts	0x0118, r24
            led_connect_on();

            /* Print MAC address of new connection */
            uart_print_pgm(string_connection);
     fd0:	80 ee       	ldi	r24, 0xE0	; 224
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <uart_print_pgm>
            for (i = 0; i < 5; i++) {
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	18 c0       	rjmp	.+48     	; 0x100c <nrf_parse+0xe6>
                uart_puthex(rx->data[7 - i]);
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	27 e0       	ldi	r18, 0x07	; 7
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	48 1b       	sub	r20, r24
     fea:	59 0b       	sbc	r21, r25
     fec:	ca 01       	movw	r24, r20
     fee:	2a 81       	ldd	r18, Y+2	; 0x02
     ff0:	3b 81       	ldd	r19, Y+3	; 0x03
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	02 96       	adiw	r24, 0x02	; 2
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <uart_puthex>
                uart_putchar(':');
    1000:	8a e3       	ldi	r24, 0x3A	; 58
    1002:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            nrf_connect_state = NRF_STATE_CONNECTED;
            led_connect_on();

            /* Print MAC address of new connection */
            uart_print_pgm(string_connection);
            for (i = 0; i < 5; i++) {
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	85 30       	cpi	r24, 0x05	; 5
    1010:	28 f3       	brcs	.-54     	; 0xfdc <nrf_parse+0xb6>
                uart_puthex(rx->data[7 - i]);
                uart_putchar(':');
            }
            uart_puthex(rx->data[8 - i]);
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	28 e0       	ldi	r18, 0x08	; 8
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	a9 01       	movw	r20, r18
    101e:	48 1b       	sub	r20, r24
    1020:	59 0b       	sbc	r21, r25
    1022:	ca 01       	movw	r24, r20
    1024:	2a 81       	ldd	r18, Y+2	; 0x02
    1026:	3b 81       	ldd	r19, Y+3	; 0x03
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	02 96       	adiw	r24, 0x02	; 2
    102e:	fc 01       	movw	r30, r24
    1030:	80 81       	ld	r24, Z
    1032:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <uart_puthex>
            uart_newline();
    1036:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <uart_newline>
            break;
    103a:	2a c1       	rjmp	.+596    	; 0x1290 <nrf_parse+0x36a>

        case NRF_EVT_DISCONNECTED:
            led_connect_off();
            nrf_close_tx_pipes();
    103c:	0e 94 94 05 	call	0xb28	; 0xb28 <nrf_close_tx_pipes>
            nrf_connect_state = NRF_STATE_DISCONNECT;
    1040:	10 92 18 01 	sts	0x0118, r1
            break;
    1044:	25 c1       	rjmp	.+586    	; 0x1290 <nrf_parse+0x36a>

        case NRF_EVT_PIPE_STATUS:
            /* Assemble pipes_open information from received pipe status */
            for (pipes_open = 0, i = 0; i < 8; i++) {
    1046:	10 92 1b 01 	sts	0x011B, r1
    104a:	10 92 1c 01 	sts	0x011C, r1
    104e:	10 92 1d 01 	sts	0x011D, r1
    1052:	10 92 1e 01 	sts	0x011E, r1
    1056:	10 92 1f 01 	sts	0x011F, r1
    105a:	10 92 20 01 	sts	0x0120, r1
    105e:	10 92 21 01 	sts	0x0121, r1
    1062:	10 92 22 01 	sts	0x0122, r1
    1066:	19 82       	std	Y+1, r1	; 0x01
    1068:	5d c0       	rjmp	.+186    	; 0x1124 <nrf_parse+0x1fe>
                pipes_open |= rx->data[i+1] << (8 * i);
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9c 01       	movw	r18, r24
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	9b 81       	ldd	r25, Y+3	; 0x03
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	02 96       	adiw	r24, 0x02	; 2
    1080:	fc 01       	movw	r30, r24
    1082:	80 81       	ld	r24, Z
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	a9 01       	movw	r20, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <nrf_parse+0x17c>
    109e:	44 0f       	add	r20, r20
    10a0:	55 1f       	adc	r21, r21
    10a2:	8a 95       	dec	r24
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <nrf_parse+0x178>
    10a6:	ca 01       	movw	r24, r20
    10a8:	9d 83       	std	Y+5, r25	; 0x05
    10aa:	8c 83       	std	Y+4, r24	; 0x04
    10ac:	89 2f       	mov	r24, r25
    10ae:	88 0f       	add	r24, r24
    10b0:	88 0b       	sbc	r24, r24
    10b2:	8e 83       	std	Y+6, r24	; 0x06
    10b4:	8f 83       	std	Y+7, r24	; 0x07
    10b6:	88 87       	std	Y+8, r24	; 0x08
    10b8:	89 87       	std	Y+9, r24	; 0x09
    10ba:	8a 87       	std	Y+10, r24	; 0x0a
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	20 91 1b 01 	lds	r18, 0x011B
    10c2:	30 91 1c 01 	lds	r19, 0x011C
    10c6:	40 91 1d 01 	lds	r20, 0x011D
    10ca:	50 91 1e 01 	lds	r21, 0x011E
    10ce:	60 91 1f 01 	lds	r22, 0x011F
    10d2:	70 91 20 01 	lds	r23, 0x0120
    10d6:	80 91 21 01 	lds	r24, 0x0121
    10da:	90 91 22 01 	lds	r25, 0x0122
    10de:	ac 80       	ldd	r10, Y+4	; 0x04
    10e0:	a2 2a       	or	r10, r18
    10e2:	bd 80       	ldd	r11, Y+5	; 0x05
    10e4:	b3 2a       	or	r11, r19
    10e6:	ce 80       	ldd	r12, Y+6	; 0x06
    10e8:	c4 2a       	or	r12, r20
    10ea:	df 80       	ldd	r13, Y+7	; 0x07
    10ec:	d5 2a       	or	r13, r21
    10ee:	e8 84       	ldd	r14, Y+8	; 0x08
    10f0:	e6 2a       	or	r14, r22
    10f2:	f9 84       	ldd	r15, Y+9	; 0x09
    10f4:	f7 2a       	or	r15, r23
    10f6:	0a 85       	ldd	r16, Y+10	; 0x0a
    10f8:	08 2b       	or	r16, r24
    10fa:	1b 85       	ldd	r17, Y+11	; 0x0b
    10fc:	19 2b       	or	r17, r25
    10fe:	a0 92 1b 01 	sts	0x011B, r10
    1102:	b0 92 1c 01 	sts	0x011C, r11
    1106:	c0 92 1d 01 	sts	0x011D, r12
    110a:	d0 92 1e 01 	sts	0x011E, r13
    110e:	e0 92 1f 01 	sts	0x011F, r14
    1112:	f0 92 20 01 	sts	0x0120, r15
    1116:	00 93 21 01 	sts	0x0121, r16
    111a:	10 93 22 01 	sts	0x0122, r17
            nrf_connect_state = NRF_STATE_DISCONNECT;
            break;

        case NRF_EVT_PIPE_STATUS:
            /* Assemble pipes_open information from received pipe status */
            for (pipes_open = 0, i = 0; i < 8; i++) {
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	88 30       	cpi	r24, 0x08	; 8
    1128:	08 f4       	brcc	.+2      	; 0x112c <nrf_parse+0x206>
    112a:	9f cf       	rjmp	.-194    	; 0x106a <nrf_parse+0x144>
                pipes_open |= rx->data[i+1] << (8 * i);
            }

            uart_print_pgm(string_pipes_open);
    112c:	83 ed       	ldi	r24, 0xD3	; 211
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 65 0b 	call	0x16ca	; 0x16ca <uart_print_pgm>
            for (i = 1; i <= NUMBER_OF_PIPES; i++) {
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	51 c0       	rjmp	.+162    	; 0x11dc <nrf_parse+0x2b6>
                if (pipes_open & (1 << i)) {
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <nrf_parse+0x224>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	2a 95       	dec	r18
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <nrf_parse+0x220>
    114e:	9d 87       	std	Y+13, r25	; 0x0d
    1150:	8c 87       	std	Y+12, r24	; 0x0c
    1152:	89 2f       	mov	r24, r25
    1154:	88 0f       	add	r24, r24
    1156:	88 0b       	sbc	r24, r24
    1158:	8e 87       	std	Y+14, r24	; 0x0e
    115a:	8f 87       	std	Y+15, r24	; 0x0f
    115c:	88 8b       	std	Y+16, r24	; 0x10
    115e:	89 8b       	std	Y+17, r24	; 0x11
    1160:	8a 8b       	std	Y+18, r24	; 0x12
    1162:	8b 8b       	std	Y+19, r24	; 0x13
    1164:	20 91 1b 01 	lds	r18, 0x011B
    1168:	30 91 1c 01 	lds	r19, 0x011C
    116c:	40 91 1d 01 	lds	r20, 0x011D
    1170:	50 91 1e 01 	lds	r21, 0x011E
    1174:	60 91 1f 01 	lds	r22, 0x011F
    1178:	70 91 20 01 	lds	r23, 0x0120
    117c:	80 91 21 01 	lds	r24, 0x0121
    1180:	90 91 22 01 	lds	r25, 0x0122
    1184:	2c 84       	ldd	r2, Y+12	; 0x0c
    1186:	22 22       	and	r2, r18
    1188:	3d 84       	ldd	r3, Y+13	; 0x0d
    118a:	33 22       	and	r3, r19
    118c:	4e 84       	ldd	r4, Y+14	; 0x0e
    118e:	44 22       	and	r4, r20
    1190:	5f 84       	ldd	r5, Y+15	; 0x0f
    1192:	55 22       	and	r5, r21
    1194:	68 88       	ldd	r6, Y+16	; 0x10
    1196:	66 22       	and	r6, r22
    1198:	79 88       	ldd	r7, Y+17	; 0x11
    119a:	77 22       	and	r7, r23
    119c:	8a 88       	ldd	r8, Y+18	; 0x12
    119e:	88 22       	and	r8, r24
    11a0:	9b 88       	ldd	r9, Y+19	; 0x13
    11a2:	99 22       	and	r9, r25
    11a4:	22 2d       	mov	r18, r2
    11a6:	33 2d       	mov	r19, r3
    11a8:	44 2d       	mov	r20, r4
    11aa:	55 2d       	mov	r21, r5
    11ac:	66 2d       	mov	r22, r6
    11ae:	77 2d       	mov	r23, r7
    11b0:	88 2d       	mov	r24, r8
    11b2:	99 2d       	mov	r25, r9
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	0e 94 35 0c 	call	0x186a	; 0x186a <__cmpdi2_s8>
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <nrf_parse+0x2b0>
                    uart_putint(i, 1);
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	41 e0       	ldi	r20, 0x01	; 1
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 98 0b 	call	0x1730	; 0x1730 <uart_putint>
                    uart_putchar(' ');
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            for (pipes_open = 0, i = 0; i < 8; i++) {
                pipes_open |= rx->data[i+1] << (8 * i);
            }

            uart_print_pgm(string_pipes_open);
            for (i = 1; i <= NUMBER_OF_PIPES; i++) {
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <nrf_parse+0x2be>
    11e2:	ab cf       	rjmp	.-170    	; 0x113a <nrf_parse+0x214>
                if (pipes_open & (1 << i)) {
                    uart_putint(i, 1);
                    uart_putchar(' ');
                }
            }
            uart_newline();
    11e4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <uart_newline>
            break;
    11e8:	53 c0       	rjmp	.+166    	; 0x1290 <nrf_parse+0x36a>

        case NRF_EVT_DATA_RECEIVED:
            if (rx->data[1] == PIPE_EXAMPLE_SERVICE_PWM_DUTY_CYCLE_RX) {
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	9b 81       	ldd	r25, Y+3	; 0x03
    11ee:	fc 01       	movw	r30, r24
    11f0:	83 81       	ldd	r24, Z+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	59 f5       	brne	.+86     	; 0x124c <nrf_parse+0x326>
                if (rx->data[2] > 0) {
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	fc 01       	movw	r30, r24
    11fc:	84 81       	ldd	r24, Z+4	; 0x04
    11fe:	88 23       	and	r24, r24
    1200:	99 f0       	breq	.+38     	; 0x1228 <nrf_parse+0x302>
                    OCR0A = rx->data[2];
    1202:	87 e4       	ldi	r24, 0x47	; 71
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	2a 81       	ldd	r18, Y+2	; 0x02
    1208:	3b 81       	ldd	r19, Y+3	; 0x03
    120a:	f9 01       	movw	r30, r18
    120c:	24 81       	ldd	r18, Z+4	; 0x04
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
                    TCCR0A = 0x83; // Fast PWM (mode 4), clear on match and set on bottom
    1212:	84 e4       	ldi	r24, 0x44	; 68
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	23 e8       	ldi	r18, 0x83	; 131
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
                    TCCR0B = 0x04; // Fast PWM (mode 4), prescaler 256
    121c:	85 e4       	ldi	r24, 0x45	; 69
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	24 e0       	ldi	r18, 0x04	; 4
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
    1226:	12 c0       	rjmp	.+36     	; 0x124c <nrf_parse+0x326>
                } else {
                    TCCR0A = 0x00;
    1228:	84 e4       	ldi	r24, 0x44	; 68
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	fc 01       	movw	r30, r24
    122e:	10 82       	st	Z, r1
                    TCCR0B = 0x00;
    1230:	85 e4       	ldi	r24, 0x45	; 69
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	fc 01       	movw	r30, r24
    1236:	10 82       	st	Z, r1
                    PORTD &= ~(1 << PD6);
    1238:	8b e2       	ldi	r24, 0x2B	; 43
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	2b e2       	ldi	r18, 0x2B	; 43
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	f9 01       	movw	r30, r18
    1242:	20 81       	ld	r18, Z
    1244:	2f 7b       	andi	r18, 0xBF	; 191
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
                }
            }
            break;
    124a:	22 c0       	rjmp	.+68     	; 0x1290 <nrf_parse+0x36a>
    124c:	21 c0       	rjmp	.+66     	; 0x1290 <nrf_parse+0x36a>

        default:
            uart_print_pgm(string_received);
    124e:	82 ef       	ldi	r24, 0xF2	; 242
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 65 0b 	call	0x16ca	; 0x16ca <uart_print_pgm>
            for (i = 0; i < rx->length; i++) {
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	12 c0       	rjmp	.+36     	; 0x127e <nrf_parse+0x358>
                uart_putchar(' ');
    125a:	80 e2       	ldi	r24, 0x20	; 32
    125c:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
                uart_puthex(rx->data[i]);
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2a 81       	ldd	r18, Y+2	; 0x02
    1268:	3b 81       	ldd	r19, Y+3	; 0x03
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	02 96       	adiw	r24, 0x02	; 2
    1270:	fc 01       	movw	r30, r24
    1272:	80 81       	ld	r24, Z
    1274:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <uart_puthex>
            }
            break;

        default:
            uart_print_pgm(string_received);
            for (i = 0; i < rx->length; i++) {
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	fc 01       	movw	r30, r24
    1284:	91 81       	ldd	r25, Z+1	; 0x01
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	89 17       	cp	r24, r25
    128a:	38 f3       	brcs	.-50     	; 0x125a <nrf_parse+0x334>
                uart_putchar(' ');
                uart_puthex(rx->data[i]);
            }
            uart_newline();
    128c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <uart_newline>
            
    }
}
    1290:	63 96       	adiw	r28, 0x13	; 19
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	9f 90       	pop	r9
    12b2:	8f 90       	pop	r8
    12b4:	7f 90       	pop	r7
    12b6:	6f 90       	pop	r6
    12b8:	5f 90       	pop	r5
    12ba:	4f 90       	pop	r4
    12bc:	3f 90       	pop	r3
    12be:	2f 90       	pop	r2
    12c0:	08 95       	ret

000012c2 <nrf_send_button_data>:
 * @param button Button state to send
 * @return 0 on success, -1 if tx pipe is closed
 */
int8_t
nrf_send_button_data(uint8_t button)
{
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	1f 92       	push	r1
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	89 83       	std	Y+1, r24	; 0x01
    if (!(pipes_open & (1 << PIPE_EXAMPLE_SERVICE_BUTTON_STATE_TX))) {
    12de:	20 91 1b 01 	lds	r18, 0x011B
    12e2:	30 91 1c 01 	lds	r19, 0x011C
    12e6:	40 91 1d 01 	lds	r20, 0x011D
    12ea:	50 91 1e 01 	lds	r21, 0x011E
    12ee:	60 91 1f 01 	lds	r22, 0x011F
    12f2:	70 91 20 01 	lds	r23, 0x0120
    12f6:	80 91 21 01 	lds	r24, 0x0121
    12fa:	90 91 22 01 	lds	r25, 0x0122
    12fe:	e2 2f       	mov	r30, r18
    1300:	e4 70       	andi	r30, 0x04	; 4
    1302:	ae 2e       	mov	r10, r30
    1304:	e3 2f       	mov	r30, r19
    1306:	e0 70       	andi	r30, 0x00	; 0
    1308:	be 2e       	mov	r11, r30
    130a:	e4 2f       	mov	r30, r20
    130c:	e0 70       	andi	r30, 0x00	; 0
    130e:	ce 2e       	mov	r12, r30
    1310:	e5 2f       	mov	r30, r21
    1312:	e0 70       	andi	r30, 0x00	; 0
    1314:	de 2e       	mov	r13, r30
    1316:	e6 2f       	mov	r30, r22
    1318:	e0 70       	andi	r30, 0x00	; 0
    131a:	ee 2e       	mov	r14, r30
    131c:	e7 2f       	mov	r30, r23
    131e:	e0 70       	andi	r30, 0x00	; 0
    1320:	fe 2e       	mov	r15, r30
    1322:	08 2f       	mov	r16, r24
    1324:	00 70       	andi	r16, 0x00	; 0
    1326:	19 2f       	mov	r17, r25
    1328:	10 70       	andi	r17, 0x00	; 0
    132a:	2a 2d       	mov	r18, r10
    132c:	3b 2d       	mov	r19, r11
    132e:	4c 2d       	mov	r20, r12
    1330:	5d 2d       	mov	r21, r13
    1332:	6e 2d       	mov	r22, r14
    1334:	7f 2d       	mov	r23, r15
    1336:	80 2f       	mov	r24, r16
    1338:	91 2f       	mov	r25, r17
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	0e 94 35 0c 	call	0x186a	; 0x186a <__cmpdi2_s8>
    1340:	31 f4       	brne	.+12     	; 0x134e <nrf_send_button_data+0x8c>
        uart_print_pgm(string_pipe_closed);
    1342:	83 ec       	ldi	r24, 0xC3	; 195
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 65 0b 	call	0x16ca	; 0x16ca <uart_print_pgm>
        return -1;
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	1b c0       	rjmp	.+54     	; 0x1384 <nrf_send_button_data+0xc2>
    }

    memset(&tx, 0, sizeof(tx));
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	83 e2       	ldi	r24, 0x23	; 35
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>

    tx.length = 3;
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	80 93 23 01 	sts	0x0123, r24
    tx.command = NRF_CMD_SEND_DATA;
    1364:	85 e1       	ldi	r24, 0x15	; 21
    1366:	80 93 24 01 	sts	0x0124, r24
    tx.data[0] = PIPE_EXAMPLE_SERVICE_BUTTON_STATE_TX;
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	80 93 25 01 	sts	0x0125, r24
    tx.data[1] = button;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	80 93 26 01 	sts	0x0126, r24

    nrf_send(&tx);
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	83 e2       	ldi	r24, 0x23	; 35
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nrf_transmit>

    return 0;
    1382:	80 e0       	ldi	r24, 0x00	; 0
}
    1384:	0f 90       	pop	r0
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	08 95       	ret

0000139c <nrf_print_rx>:
 * @param rx Received data to print
 * @return none
 */
void
nrf_print_rx(struct nrf_rx *rx)
{
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <nrf_print_rx+0x6>
    13a2:	1f 92       	push	r1
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9b 83       	std	Y+3, r25	; 0x03
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;

    uart_putchar('[');
    13ac:	8b e5       	ldi	r24, 0x5B	; 91
    13ae:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
    uart_putint(rx->length, 2);
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	fc 01       	movw	r30, r24
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 e0       	ldi	r26, 0x00	; 0
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	42 e0       	ldi	r20, 0x02	; 2
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 98 0b 	call	0x1730	; 0x1730 <uart_putint>
    uart_putchar(']');
    13cc:	8d e5       	ldi	r24, 0x5D	; 93
    13ce:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
    
    for (i = 0; i < rx->length; i++) {
    13d2:	19 82       	std	Y+1, r1	; 0x01
    13d4:	12 c0       	rjmp	.+36     	; 0x13fa <nrf_print_rx+0x5e>
        uart_putchar(' ');
    13d6:	80 e2       	ldi	r24, 0x20	; 32
    13d8:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
        uart_puthex(rx->data[i]);
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	2a 81       	ldd	r18, Y+2	; 0x02
    13e4:	3b 81       	ldd	r19, Y+3	; 0x03
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19
    13ea:	02 96       	adiw	r24, 0x02	; 2
    13ec:	fc 01       	movw	r30, r24
    13ee:	80 81       	ld	r24, Z
    13f0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <uart_puthex>

    uart_putchar('[');
    uart_putint(rx->length, 2);
    uart_putchar(']');
    
    for (i = 0; i < rx->length; i++) {
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	8f 5f       	subi	r24, 0xFF	; 255
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	fc 01       	movw	r30, r24
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	89 17       	cp	r24, r25
    1406:	38 f3       	brcs	.-50     	; 0x13d6 <nrf_print_rx+0x3a>
        uart_putchar(' ');
        uart_puthex(rx->data[i]);
    }
    uart_newline();
    1408:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <uart_newline>
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

00001418 <nrf_print_temperature>:
 * @param none
 * @return none
 */
void
nrf_print_temperature(void)
{
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	00 d0       	rcall	.+0      	; 0x141e <nrf_print_temperature+0x6>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    data16_t raw;

    memset(&tx, 0, sizeof(tx));
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	83 e2       	ldi	r24, 0x23	; 35
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>
    memset(&rx, 0, sizeof(rx));
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	8f e9       	ldi	r24, 0x9F	; 159
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <memset>

    tx.length = 0x01;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 93 23 01 	sts	0x0123, r24
    tx.command = NRF_CMD_GET_TEMPERATURE;
    1448:	8c e0       	ldi	r24, 0x0C	; 12
    144a:	80 93 24 01 	sts	0x0124, r24
    nrf_txrx(&tx, &rx);
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	83 e2       	ldi	r24, 0x23	; 35
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nrf_transmit>
    145a:	6f e9       	ldi	r22, 0x9F	; 159
    145c:	71 e0       	ldi	r23, 0x01	; 1
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nrf_transmit>

    raw.lsb = rx.data[3];
    1466:	80 91 a4 01 	lds	r24, 0x01A4
    146a:	89 83       	std	Y+1, r24	; 0x01
    raw.msb = rx.data[4];
    146c:	80 91 a5 01 	lds	r24, 0x01A5
    1470:	8a 83       	std	Y+2, r24	; 0x02

    uart_print_pgm(string_temperature);
    1472:	8c e0       	ldi	r24, 0x0C	; 12
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 65 0b 	call	0x16ca	; 0x16ca <uart_print_pgm>
    uart_putint(raw.word >> 2, 1);
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	96 95       	lsr	r25
    1480:	87 95       	ror	r24
    1482:	96 95       	lsr	r25
    1484:	87 95       	ror	r24
    1486:	cc 01       	movw	r24, r24
    1488:	a0 e0       	ldi	r26, 0x00	; 0
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	0e 94 98 0b 	call	0x1730	; 0x1730 <uart_putint>
    uart_putchar('.');
    1496:	8e e2       	ldi	r24, 0x2E	; 46
    1498:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
    switch (raw.word & 0x03) {
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	83 70       	andi	r24, 0x03	; 3
    14a2:	99 27       	eor	r25, r25
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 05       	cpc	r25, r1
    14a8:	81 f0       	breq	.+32     	; 0x14ca <nrf_print_temperature+0xb2>
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	30 f0       	brcs	.+12     	; 0x14bc <nrf_print_temperature+0xa4>
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	91 05       	cpc	r25, r1
    14b4:	89 f0       	breq	.+34     	; 0x14d8 <nrf_print_temperature+0xc0>
    14b6:	03 97       	sbiw	r24, 0x03	; 3
    14b8:	b1 f0       	breq	.+44     	; 0x14e6 <nrf_print_temperature+0xce>
    14ba:	1c c0       	rjmp	.+56     	; 0x14f4 <nrf_print_temperature+0xdc>
        case 0:
            uart_putchar('0');
    14bc:	80 e3       	ldi	r24, 0x30	; 48
    14be:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            uart_putchar('0');
    14c2:	80 e3       	ldi	r24, 0x30	; 48
    14c4:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            break;
    14c8:	15 c0       	rjmp	.+42     	; 0x14f4 <nrf_print_temperature+0xdc>
        case 1:
            uart_putchar('2');
    14ca:	82 e3       	ldi	r24, 0x32	; 50
    14cc:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            uart_putchar('5');
    14d0:	85 e3       	ldi	r24, 0x35	; 53
    14d2:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            break;
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <nrf_print_temperature+0xdc>
        case 2:
            uart_putchar('5');
    14d8:	85 e3       	ldi	r24, 0x35	; 53
    14da:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            uart_putchar('0');
    14de:	80 e3       	ldi	r24, 0x30	; 48
    14e0:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            break;
    14e4:	07 c0       	rjmp	.+14     	; 0x14f4 <nrf_print_temperature+0xdc>
        case 3:
            uart_putchar('7');
    14e6:	87 e3       	ldi	r24, 0x37	; 55
    14e8:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            uart_putchar('5');
    14ec:	85 e3       	ldi	r24, 0x35	; 53
    14ee:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
            break;
    14f2:	00 00       	nop
    }

    uart_print_pgm(string_celsius);
    14f4:	8a e1       	ldi	r24, 0x1A	; 26
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <uart_print_pgm>
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <spi_init>:
#include <avr/io.h>

void
spi_init(void)
{
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
	//PRR0 |= (0<<PRSPI);
	/* Port setup */
	/* Set PB0 (nRF reset), PB2 (RDYN), PB3 (MOSI) and PB5 (SCK) as output */
	DDRB = (1 << PB0) | (1 << PB2)  | (1 << PB2) | (1 << PB3) | (1 << PB5);
    150e:	84 e2       	ldi	r24, 0x24	; 36
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	2d e2       	ldi	r18, 0x2D	; 45
    1514:	fc 01       	movw	r30, r24
    1516:	20 83       	st	Z, r18
	PORTB = 0xff;
    1518:	85 e2       	ldi	r24, 0x25	; 37
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	2f ef       	ldi	r18, 0xFF	; 255
    151e:	fc 01       	movw	r30, r24
    1520:	20 83       	st	Z, r18

    /* master, SPI mode 0 */
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << DORD);
    1522:	8c e4       	ldi	r24, 0x4C	; 76
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	21 e7       	ldi	r18, 0x71	; 113
    1528:	fc 01       	movw	r30, r24
    152a:	20 83       	st	Z, r18
}
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <spi_transmit>:
 * @param data Data to transmit
 * @return Read back data from the device
 */
uint8_t
spi_transmit(uint8_t data)
{
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	1f 92       	push	r1
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    153e:	8e e4       	ldi	r24, 0x4E	; 78
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	29 81       	ldd	r18, Y+1	; 0x01
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18

    while (!(SPSR & (1 << SPIF))) {
    1548:	00 00       	nop
    154a:	8d e4       	ldi	r24, 0x4D	; 77
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	fc 01       	movw	r30, r24
    1550:	80 81       	ld	r24, Z
    1552:	88 23       	and	r24, r24
    1554:	d4 f7       	brge	.-12     	; 0x154a <spi_transmit+0x18>
        /* wait */
    }

    return SPDR;
    1556:	8e e4       	ldi	r24, 0x4E	; 78
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	fc 01       	movw	r30, r24
    155c:	80 81       	ld	r24, Z
}
    155e:	0f 90       	pop	r0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <uart_init>:
#include <avr/pgmspace.h>
#include "uart.h"
#define BRC ((16000000/16/9600) - 1)

void uart_init()
{
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	UBRR1H = (unsigned char) (BRC >> 8);
    156e:	8d ec       	ldi	r24, 0xCD	; 205
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	fc 01       	movw	r30, r24
    1574:	10 82       	st	Z, r1
	UBRR1L = BRC;
    1576:	8c ec       	ldi	r24, 0xCC	; 204
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	27 e6       	ldi	r18, 0x67	; 103
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18

	//enable recieve and transmit
	UCSR1B = ( 1 << TXEN1 )| (1<<RXEN1);
    1580:	89 ec       	ldi	r24, 0xC9	; 201
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	28 e1       	ldi	r18, 0x18	; 24
    1586:	fc 01       	movw	r30, r24
    1588:	20 83       	st	Z, r18

	//set frame format
	UCSR1C = ( 1 << USBS1 ) | ( 3 << UCSZ10 );
    158a:	8a ec       	ldi	r24, 0xCA	; 202
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	2e e0       	ldi	r18, 0x0E	; 14
    1590:	fc 01       	movw	r30, r24
    1592:	20 83       	st	Z, r18

}
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <tobuf>:
 * @param buf    Buffer the digits are put.
 * @return Number of digits converted.
 */
static uint8_t
tobuf(int32_t number, char *buf)
{
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	2f 97       	sbiw	r28, 0x0f	; 15
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	6e 83       	std	Y+6, r22	; 0x06
    15b0:	7f 83       	std	Y+7, r23	; 0x07
    15b2:	88 87       	std	Y+8, r24	; 0x08
    15b4:	99 87       	std	Y+9, r25	; 0x09
    15b6:	5b 87       	std	Y+11, r21	; 0x0b
    15b8:	4a 87       	std	Y+10, r20	; 0x0a
	int32_t next_digit;
	int8_t i;

	if (number < 0) {
    15ba:	8e 81       	ldd	r24, Y+6	; 0x06
    15bc:	9f 81       	ldd	r25, Y+7	; 0x07
    15be:	a8 85       	ldd	r26, Y+8	; 0x08
    15c0:	b9 85       	ldd	r27, Y+9	; 0x09
    15c2:	bb 23       	and	r27, r27
    15c4:	7c f4       	brge	.+30     	; 0x15e4 <tobuf+0x4a>
		number *= -1;
    15c6:	8e 81       	ldd	r24, Y+6	; 0x06
    15c8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ca:	a8 85       	ldd	r26, Y+8	; 0x08
    15cc:	b9 85       	ldd	r27, Y+9	; 0x09
    15ce:	b0 95       	com	r27
    15d0:	a0 95       	com	r26
    15d2:	90 95       	com	r25
    15d4:	81 95       	neg	r24
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	af 4f       	sbci	r26, 0xFF	; 255
    15da:	bf 4f       	sbci	r27, 0xFF	; 255
    15dc:	8e 83       	std	Y+6, r24	; 0x06
    15de:	9f 83       	std	Y+7, r25	; 0x07
    15e0:	a8 87       	std	Y+8, r26	; 0x08
    15e2:	b9 87       	std	Y+9, r27	; 0x09
	}

	for (i = 0; i < 10 && number; i++) {
    15e4:	19 82       	std	Y+1, r1	; 0x01
    15e6:	32 c0       	rjmp	.+100    	; 0x164c <tobuf+0xb2>
		next_digit = (int32_t) (number / 10);
    15e8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ea:	9f 81       	ldd	r25, Y+7	; 0x07
    15ec:	a8 85       	ldd	r26, Y+8	; 0x08
    15ee:	b9 85       	ldd	r27, Y+9	; 0x09
    15f0:	2a e0       	ldi	r18, 0x0A	; 10
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 16 0c 	call	0x182c	; 0x182c <__divmodsi4>
    1600:	da 01       	movw	r26, r20
    1602:	c9 01       	movw	r24, r18
    1604:	8a 83       	std	Y+2, r24	; 0x02
    1606:	9b 83       	std	Y+3, r25	; 0x03
    1608:	ac 83       	std	Y+4, r26	; 0x04
    160a:	bd 83       	std	Y+5, r27	; 0x05
		buf[i] = ((char) (number - next_digit * 10)) + '0';
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	08 2e       	mov	r0, r24
    1610:	00 0c       	add	r0, r0
    1612:	99 0b       	sbc	r25, r25
    1614:	2a 85       	ldd	r18, Y+10	; 0x0a
    1616:	3b 85       	ldd	r19, Y+11	; 0x0b
    1618:	82 0f       	add	r24, r18
    161a:	93 1f       	adc	r25, r19
    161c:	3e 81       	ldd	r19, Y+6	; 0x06
    161e:	2a 81       	ldd	r18, Y+2	; 0x02
    1620:	22 0f       	add	r18, r18
    1622:	42 2f       	mov	r20, r18
    1624:	44 0f       	add	r20, r20
    1626:	44 0f       	add	r20, r20
    1628:	24 0f       	add	r18, r20
    162a:	43 2f       	mov	r20, r19
    162c:	42 1b       	sub	r20, r18
    162e:	24 2f       	mov	r18, r20
    1630:	20 5d       	subi	r18, 0xD0	; 208
    1632:	fc 01       	movw	r30, r24
    1634:	20 83       	st	Z, r18
		number = next_digit;
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	ac 81       	ldd	r26, Y+4	; 0x04
    163c:	bd 81       	ldd	r27, Y+5	; 0x05
    163e:	8e 83       	std	Y+6, r24	; 0x06
    1640:	9f 83       	std	Y+7, r25	; 0x07
    1642:	a8 87       	std	Y+8, r26	; 0x08
    1644:	b9 87       	std	Y+9, r27	; 0x09

	if (number < 0) {
		number *= -1;
	}

	for (i = 0; i < 10 && number; i++) {
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	8a 30       	cpi	r24, 0x0A	; 10
    1650:	44 f4       	brge	.+16     	; 0x1662 <tobuf+0xc8>
    1652:	8e 81       	ldd	r24, Y+6	; 0x06
    1654:	9f 81       	ldd	r25, Y+7	; 0x07
    1656:	a8 85       	ldd	r26, Y+8	; 0x08
    1658:	b9 85       	ldd	r27, Y+9	; 0x09
    165a:	89 2b       	or	r24, r25
    165c:	8a 2b       	or	r24, r26
    165e:	8b 2b       	or	r24, r27
    1660:	19 f6       	brne	.-122    	; 0x15e8 <tobuf+0x4e>
		next_digit = (int32_t) (number / 10);
		buf[i] = ((char) (number - next_digit * 10)) + '0';
		number = next_digit;
	}
	return --i;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	81 50       	subi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	89 81       	ldd	r24, Y+1	; 0x01
}
    166a:	2f 96       	adiw	r28, 0x0f	; 15
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <uart_putchar>:



//uart_transmit
void uart_putchar(char value)
{
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	1f 92       	push	r1
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
	// wait for empty transmit buffer
		while ( ! ( UCSR1A & ( 1 << UDRE1 ) ) );
    1688:	00 00       	nop
    168a:	88 ec       	ldi	r24, 0xC8	; 200
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	fc 01       	movw	r30, r24
    1690:	80 81       	ld	r24, Z
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	80 72       	andi	r24, 0x20	; 32
    1698:	99 27       	eor	r25, r25
    169a:	89 2b       	or	r24, r25
    169c:	b1 f3       	breq	.-20     	; 0x168a <uart_putchar+0xe>
		// put data into buffer, sends data
		UDR1 = value;
    169e:	8e ec       	ldi	r24, 0xCE	; 206
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	29 81       	ldd	r18, Y+1	; 0x01
    16a4:	fc 01       	movw	r30, r24
    16a6:	20 83       	st	Z, r18
}
    16a8:	0f 90       	pop	r0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <uart_newline>:


void uart_newline(void)
{
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
	uart_putchar('\r');
    16b8:	8d e0       	ldi	r24, 0x0D	; 13
    16ba:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
	uart_putchar('\n');
    16be:	8a e0       	ldi	r24, 0x0A	; 10
    16c0:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <uart_print_pgm>:

void uart_print_pgm(const char *data)
{
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	28 97       	sbiw	r28, 0x08	; 8
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	98 87       	std	Y+8, r25	; 0x08
    16e0:	8f 83       	std	Y+7, r24	; 0x07
    while (pgm_read_byte(data) != 0x00) {
    16e2:	11 c0       	rjmp	.+34     	; 0x1706 <uart_print_pgm+0x3c>
        uart_putchar(pgm_read_byte(data++));
    16e4:	8f 81       	ldd	r24, Y+7	; 0x07
    16e6:	98 85       	ldd	r25, Y+8	; 0x08
    16e8:	9c 01       	movw	r18, r24
    16ea:	2f 5f       	subi	r18, 0xFF	; 255
    16ec:	3f 4f       	sbci	r19, 0xFF	; 255
    16ee:	38 87       	std	Y+8, r19	; 0x08
    16f0:	2f 83       	std	Y+7, r18	; 0x07
    16f2:	9d 83       	std	Y+5, r25	; 0x05
    16f4:	8c 83       	std	Y+4, r24	; 0x04
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	fc 01       	movw	r30, r24
    16fc:	84 91       	lpm	r24, Z
    16fe:	8e 83       	std	Y+6, r24	; 0x06
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
	uart_putchar('\n');
}

void uart_print_pgm(const char *data)
{
    while (pgm_read_byte(data) != 0x00) {
    1706:	8f 81       	ldd	r24, Y+7	; 0x07
    1708:	98 85       	ldd	r25, Y+8	; 0x08
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	fc 01       	movw	r30, r24
    1714:	84 91       	lpm	r24, Z
    1716:	8b 83       	std	Y+3, r24	; 0x03
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 23       	and	r24, r24
    171c:	19 f7       	brne	.-58     	; 0x16e4 <uart_print_pgm+0x1a>
        uart_putchar(pgm_read_byte(data++));
    }
}
    171e:	28 96       	adiw	r28, 0x08	; 8
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <uart_putint>:
 * @param number Number to be printed.
 * @param digits Minimum number of digits to print.
 */
void
uart_putint(int32_t number, int8_t digits)
{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	60 97       	sbiw	r28, 0x10	; 16
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	6c 87       	std	Y+12, r22	; 0x0c
    1746:	7d 87       	std	Y+13, r23	; 0x0d
    1748:	8e 87       	std	Y+14, r24	; 0x0e
    174a:	9f 87       	std	Y+15, r25	; 0x0f
    174c:	48 8b       	std	Y+16, r20	; 0x10
	char buf[10];
	int8_t i;

	if (number < 0) {
    174e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1750:	9d 85       	ldd	r25, Y+13	; 0x0d
    1752:	ae 85       	ldd	r26, Y+14	; 0x0e
    1754:	bf 85       	ldd	r27, Y+15	; 0x0f
    1756:	bb 23       	and	r27, r27
    1758:	94 f4       	brge	.+36     	; 0x177e <uart_putint+0x4e>
		uart_putchar('-');
    175a:	8d e2       	ldi	r24, 0x2D	; 45
    175c:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
		number *= -1;
    1760:	8c 85       	ldd	r24, Y+12	; 0x0c
    1762:	9d 85       	ldd	r25, Y+13	; 0x0d
    1764:	ae 85       	ldd	r26, Y+14	; 0x0e
    1766:	bf 85       	ldd	r27, Y+15	; 0x0f
    1768:	b0 95       	com	r27
    176a:	a0 95       	com	r26
    176c:	90 95       	com	r25
    176e:	81 95       	neg	r24
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	af 4f       	sbci	r26, 0xFF	; 255
    1774:	bf 4f       	sbci	r27, 0xFF	; 255
    1776:	8c 87       	std	Y+12, r24	; 0x0c
    1778:	9d 87       	std	Y+13, r25	; 0x0d
    177a:	ae 87       	std	Y+14, r26	; 0x0e
    177c:	bf 87       	std	Y+15, r27	; 0x0f
	}

	i = tobuf(number, buf);
    177e:	9e 01       	movw	r18, r28
    1780:	2e 5f       	subi	r18, 0xFE	; 254
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	8c 85       	ldd	r24, Y+12	; 0x0c
    1786:	9d 85       	ldd	r25, Y+13	; 0x0d
    1788:	ae 85       	ldd	r26, Y+14	; 0x0e
    178a:	bf 85       	ldd	r27, Y+15	; 0x0f
    178c:	a9 01       	movw	r20, r18
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 cd 0a 	call	0x159a	; 0x159a <tobuf>
    1796:	89 83       	std	Y+1, r24	; 0x01

	while (i < --digits) {
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <uart_putint+0x70>
		uart_putchar('0');
    179a:	80 e3       	ldi	r24, 0x30	; 48
    179c:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
		number *= -1;
	}

	i = tobuf(number, buf);

	while (i < --digits) {
    17a0:	88 89       	ldd	r24, Y+16	; 0x10
    17a2:	81 50       	subi	r24, 0x01	; 1
    17a4:	88 8b       	std	Y+16, r24	; 0x10
    17a6:	98 89       	ldd	r25, Y+16	; 0x10
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	89 17       	cp	r24, r25
    17ac:	b4 f3       	brlt	.-20     	; 0x179a <uart_putint+0x6a>
		uart_putchar('0');
	}
	while (i >= 0) {
    17ae:	10 c0       	rjmp	.+32     	; 0x17d0 <uart_putint+0xa0>
		uart_putchar(buf[i--]);
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	98 2f       	mov	r25, r24
    17b4:	91 50       	subi	r25, 0x01	; 1
    17b6:	99 83       	std	Y+1, r25	; 0x01
    17b8:	08 2e       	mov	r0, r24
    17ba:	00 0c       	add	r0, r0
    17bc:	99 0b       	sbc	r25, r25
    17be:	9e 01       	movw	r18, r28
    17c0:	2e 5f       	subi	r18, 0xFE	; 254
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	82 0f       	add	r24, r18
    17c6:	93 1f       	adc	r25, r19
    17c8:	fc 01       	movw	r30, r24
    17ca:	80 81       	ld	r24, Z
    17cc:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
	i = tobuf(number, buf);

	while (i < --digits) {
		uart_putchar('0');
	}
	while (i >= 0) {
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	88 23       	and	r24, r24
    17d4:	6c f7       	brge	.-38     	; 0x17b0 <uart_putint+0x80>
		uart_putchar(buf[i--]);
	}
}
    17d6:	60 96       	adiw	r28, 0x10	; 16
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <uart_puthex>:


static const char hexvals[] = "0123456789abcdef";
void
uart_puthex(char c)
{
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	1f 92       	push	r1
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	89 83       	std	Y+1, r24	; 0x01
    uart_putchar(hexvals[(c >> 4) & 0x0f]);
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	82 95       	swap	r24
    17f8:	8f 70       	andi	r24, 0x0F	; 15
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	8f 70       	andi	r24, 0x0F	; 15
    1800:	99 27       	eor	r25, r25
    1802:	8a 5f       	subi	r24, 0xFA	; 250
    1804:	9e 4f       	sbci	r25, 0xFE	; 254
    1806:	fc 01       	movw	r30, r24
    1808:	80 81       	ld	r24, Z
    180a:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
    uart_putchar(hexvals[c & 0x0f]);
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	8f 70       	andi	r24, 0x0F	; 15
    1816:	99 27       	eor	r25, r25
    1818:	8a 5f       	subi	r24, 0xFA	; 250
    181a:	9e 4f       	sbci	r25, 0xFE	; 254
    181c:	fc 01       	movw	r30, r24
    181e:	80 81       	ld	r24, Z
    1820:	0e 94 3e 0b 	call	0x167c	; 0x167c <uart_putchar>
}
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <__divmodsi4>:
    182c:	05 2e       	mov	r0, r21
    182e:	97 fb       	bst	r25, 7
    1830:	1e f4       	brtc	.+6      	; 0x1838 <__divmodsi4+0xc>
    1832:	00 94       	com	r0
    1834:	0e 94 2d 0c 	call	0x185a	; 0x185a <__negsi2>
    1838:	57 fd       	sbrc	r21, 7
    183a:	07 d0       	rcall	.+14     	; 0x184a <__divmodsi4_neg2>
    183c:	0e 94 41 0c 	call	0x1882	; 0x1882 <__udivmodsi4>
    1840:	07 fc       	sbrc	r0, 7
    1842:	03 d0       	rcall	.+6      	; 0x184a <__divmodsi4_neg2>
    1844:	4e f4       	brtc	.+18     	; 0x1858 <__divmodsi4_exit>
    1846:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__negsi2>

0000184a <__divmodsi4_neg2>:
    184a:	50 95       	com	r21
    184c:	40 95       	com	r20
    184e:	30 95       	com	r19
    1850:	21 95       	neg	r18
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	4f 4f       	sbci	r20, 0xFF	; 255
    1856:	5f 4f       	sbci	r21, 0xFF	; 255

00001858 <__divmodsi4_exit>:
    1858:	08 95       	ret

0000185a <__negsi2>:
    185a:	90 95       	com	r25
    185c:	80 95       	com	r24
    185e:	70 95       	com	r23
    1860:	61 95       	neg	r22
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	8f 4f       	sbci	r24, 0xFF	; 255
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	08 95       	ret

0000186a <__cmpdi2_s8>:
    186a:	00 24       	eor	r0, r0
    186c:	a7 fd       	sbrc	r26, 7
    186e:	00 94       	com	r0
    1870:	2a 17       	cp	r18, r26
    1872:	30 05       	cpc	r19, r0
    1874:	40 05       	cpc	r20, r0
    1876:	50 05       	cpc	r21, r0
    1878:	60 05       	cpc	r22, r0
    187a:	70 05       	cpc	r23, r0
    187c:	80 05       	cpc	r24, r0
    187e:	90 05       	cpc	r25, r0
    1880:	08 95       	ret

00001882 <__udivmodsi4>:
    1882:	a1 e2       	ldi	r26, 0x21	; 33
    1884:	1a 2e       	mov	r1, r26
    1886:	aa 1b       	sub	r26, r26
    1888:	bb 1b       	sub	r27, r27
    188a:	fd 01       	movw	r30, r26
    188c:	0d c0       	rjmp	.+26     	; 0x18a8 <__udivmodsi4_ep>

0000188e <__udivmodsi4_loop>:
    188e:	aa 1f       	adc	r26, r26
    1890:	bb 1f       	adc	r27, r27
    1892:	ee 1f       	adc	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	a2 17       	cp	r26, r18
    1898:	b3 07       	cpc	r27, r19
    189a:	e4 07       	cpc	r30, r20
    189c:	f5 07       	cpc	r31, r21
    189e:	20 f0       	brcs	.+8      	; 0x18a8 <__udivmodsi4_ep>
    18a0:	a2 1b       	sub	r26, r18
    18a2:	b3 0b       	sbc	r27, r19
    18a4:	e4 0b       	sbc	r30, r20
    18a6:	f5 0b       	sbc	r31, r21

000018a8 <__udivmodsi4_ep>:
    18a8:	66 1f       	adc	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	1a 94       	dec	r1
    18b2:	69 f7       	brne	.-38     	; 0x188e <__udivmodsi4_loop>
    18b4:	60 95       	com	r22
    18b6:	70 95       	com	r23
    18b8:	80 95       	com	r24
    18ba:	90 95       	com	r25
    18bc:	9b 01       	movw	r18, r22
    18be:	ac 01       	movw	r20, r24
    18c0:	bd 01       	movw	r22, r26
    18c2:	cf 01       	movw	r24, r30
    18c4:	08 95       	ret

000018c6 <__cmpsf2>:
    18c6:	0e 94 97 0c 	call	0x192e	; 0x192e <__fp_cmp>
    18ca:	08 f4       	brcc	.+2      	; 0x18ce <__cmpsf2+0x8>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	08 95       	ret

000018d0 <__fixunssfsi>:
    18d0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__fp_splitA>
    18d4:	88 f0       	brcs	.+34     	; 0x18f8 <__fixunssfsi+0x28>
    18d6:	9f 57       	subi	r25, 0x7F	; 127
    18d8:	98 f0       	brcs	.+38     	; 0x1900 <__fixunssfsi+0x30>
    18da:	b9 2f       	mov	r27, r25
    18dc:	99 27       	eor	r25, r25
    18de:	b7 51       	subi	r27, 0x17	; 23
    18e0:	b0 f0       	brcs	.+44     	; 0x190e <__fixunssfsi+0x3e>
    18e2:	e1 f0       	breq	.+56     	; 0x191c <__fixunssfsi+0x4c>
    18e4:	66 0f       	add	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	1a f0       	brmi	.+6      	; 0x18f4 <__fixunssfsi+0x24>
    18ee:	ba 95       	dec	r27
    18f0:	c9 f7       	brne	.-14     	; 0x18e4 <__fixunssfsi+0x14>
    18f2:	14 c0       	rjmp	.+40     	; 0x191c <__fixunssfsi+0x4c>
    18f4:	b1 30       	cpi	r27, 0x01	; 1
    18f6:	91 f0       	breq	.+36     	; 0x191c <__fixunssfsi+0x4c>
    18f8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__fp_zero>
    18fc:	b1 e0       	ldi	r27, 0x01	; 1
    18fe:	08 95       	ret
    1900:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__fp_zero>
    1904:	67 2f       	mov	r22, r23
    1906:	78 2f       	mov	r23, r24
    1908:	88 27       	eor	r24, r24
    190a:	b8 5f       	subi	r27, 0xF8	; 248
    190c:	39 f0       	breq	.+14     	; 0x191c <__fixunssfsi+0x4c>
    190e:	b9 3f       	cpi	r27, 0xF9	; 249
    1910:	cc f3       	brlt	.-14     	; 0x1904 <__fixunssfsi+0x34>
    1912:	86 95       	lsr	r24
    1914:	77 95       	ror	r23
    1916:	67 95       	ror	r22
    1918:	b3 95       	inc	r27
    191a:	d9 f7       	brne	.-10     	; 0x1912 <__fixunssfsi+0x42>
    191c:	3e f4       	brtc	.+14     	; 0x192c <__fixunssfsi+0x5c>
    191e:	90 95       	com	r25
    1920:	80 95       	com	r24
    1922:	70 95       	com	r23
    1924:	61 95       	neg	r22
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	8f 4f       	sbci	r24, 0xFF	; 255
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	08 95       	ret

0000192e <__fp_cmp>:
    192e:	99 0f       	add	r25, r25
    1930:	00 08       	sbc	r0, r0
    1932:	55 0f       	add	r21, r21
    1934:	aa 0b       	sbc	r26, r26
    1936:	e0 e8       	ldi	r30, 0x80	; 128
    1938:	fe ef       	ldi	r31, 0xFE	; 254
    193a:	16 16       	cp	r1, r22
    193c:	17 06       	cpc	r1, r23
    193e:	e8 07       	cpc	r30, r24
    1940:	f9 07       	cpc	r31, r25
    1942:	c0 f0       	brcs	.+48     	; 0x1974 <__fp_cmp+0x46>
    1944:	12 16       	cp	r1, r18
    1946:	13 06       	cpc	r1, r19
    1948:	e4 07       	cpc	r30, r20
    194a:	f5 07       	cpc	r31, r21
    194c:	98 f0       	brcs	.+38     	; 0x1974 <__fp_cmp+0x46>
    194e:	62 1b       	sub	r22, r18
    1950:	73 0b       	sbc	r23, r19
    1952:	84 0b       	sbc	r24, r20
    1954:	95 0b       	sbc	r25, r21
    1956:	39 f4       	brne	.+14     	; 0x1966 <__fp_cmp+0x38>
    1958:	0a 26       	eor	r0, r26
    195a:	61 f0       	breq	.+24     	; 0x1974 <__fp_cmp+0x46>
    195c:	23 2b       	or	r18, r19
    195e:	24 2b       	or	r18, r20
    1960:	25 2b       	or	r18, r21
    1962:	21 f4       	brne	.+8      	; 0x196c <__fp_cmp+0x3e>
    1964:	08 95       	ret
    1966:	0a 26       	eor	r0, r26
    1968:	09 f4       	brne	.+2      	; 0x196c <__fp_cmp+0x3e>
    196a:	a1 40       	sbci	r26, 0x01	; 1
    196c:	a6 95       	lsr	r26
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	81 1d       	adc	r24, r1
    1972:	81 1d       	adc	r24, r1
    1974:	08 95       	ret

00001976 <__fp_split3>:
    1976:	57 fd       	sbrc	r21, 7
    1978:	90 58       	subi	r25, 0x80	; 128
    197a:	44 0f       	add	r20, r20
    197c:	55 1f       	adc	r21, r21
    197e:	59 f0       	breq	.+22     	; 0x1996 <__fp_splitA+0x10>
    1980:	5f 3f       	cpi	r21, 0xFF	; 255
    1982:	71 f0       	breq	.+28     	; 0x19a0 <__fp_splitA+0x1a>
    1984:	47 95       	ror	r20

00001986 <__fp_splitA>:
    1986:	88 0f       	add	r24, r24
    1988:	97 fb       	bst	r25, 7
    198a:	99 1f       	adc	r25, r25
    198c:	61 f0       	breq	.+24     	; 0x19a6 <__fp_splitA+0x20>
    198e:	9f 3f       	cpi	r25, 0xFF	; 255
    1990:	79 f0       	breq	.+30     	; 0x19b0 <__fp_splitA+0x2a>
    1992:	87 95       	ror	r24
    1994:	08 95       	ret
    1996:	12 16       	cp	r1, r18
    1998:	13 06       	cpc	r1, r19
    199a:	14 06       	cpc	r1, r20
    199c:	55 1f       	adc	r21, r21
    199e:	f2 cf       	rjmp	.-28     	; 0x1984 <__fp_split3+0xe>
    19a0:	46 95       	lsr	r20
    19a2:	f1 df       	rcall	.-30     	; 0x1986 <__fp_splitA>
    19a4:	08 c0       	rjmp	.+16     	; 0x19b6 <__fp_splitA+0x30>
    19a6:	16 16       	cp	r1, r22
    19a8:	17 06       	cpc	r1, r23
    19aa:	18 06       	cpc	r1, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	f1 cf       	rjmp	.-30     	; 0x1992 <__fp_splitA+0xc>
    19b0:	86 95       	lsr	r24
    19b2:	71 05       	cpc	r23, r1
    19b4:	61 05       	cpc	r22, r1
    19b6:	08 94       	sec
    19b8:	08 95       	ret

000019ba <__fp_zero>:
    19ba:	e8 94       	clt

000019bc <__fp_szero>:
    19bc:	bb 27       	eor	r27, r27
    19be:	66 27       	eor	r22, r22
    19c0:	77 27       	eor	r23, r23
    19c2:	cb 01       	movw	r24, r22
    19c4:	97 f9       	bld	r25, 7
    19c6:	08 95       	ret

000019c8 <__gesf2>:
    19c8:	0e 94 97 0c 	call	0x192e	; 0x192e <__fp_cmp>
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <__gesf2+0x8>
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	08 95       	ret

000019d2 <__mulsf3>:
    19d2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3x>
    19d6:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__fp_round>
    19da:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fp_pscA>
    19de:	38 f0       	brcs	.+14     	; 0x19ee <__mulsf3+0x1c>
    19e0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_pscB>
    19e4:	20 f0       	brcs	.+8      	; 0x19ee <__mulsf3+0x1c>
    19e6:	95 23       	and	r25, r21
    19e8:	11 f0       	breq	.+4      	; 0x19ee <__mulsf3+0x1c>
    19ea:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_inf>
    19ee:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__fp_nan>
    19f2:	11 24       	eor	r1, r1
    19f4:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__fp_szero>

000019f8 <__mulsf3x>:
    19f8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__fp_split3>
    19fc:	70 f3       	brcs	.-36     	; 0x19da <__mulsf3+0x8>

000019fe <__mulsf3_pse>:
    19fe:	95 9f       	mul	r25, r21
    1a00:	c1 f3       	breq	.-16     	; 0x19f2 <__mulsf3+0x20>
    1a02:	95 0f       	add	r25, r21
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	55 1f       	adc	r21, r21
    1a08:	62 9f       	mul	r22, r18
    1a0a:	f0 01       	movw	r30, r0
    1a0c:	72 9f       	mul	r23, r18
    1a0e:	bb 27       	eor	r27, r27
    1a10:	f0 0d       	add	r31, r0
    1a12:	b1 1d       	adc	r27, r1
    1a14:	63 9f       	mul	r22, r19
    1a16:	aa 27       	eor	r26, r26
    1a18:	f0 0d       	add	r31, r0
    1a1a:	b1 1d       	adc	r27, r1
    1a1c:	aa 1f       	adc	r26, r26
    1a1e:	64 9f       	mul	r22, r20
    1a20:	66 27       	eor	r22, r22
    1a22:	b0 0d       	add	r27, r0
    1a24:	a1 1d       	adc	r26, r1
    1a26:	66 1f       	adc	r22, r22
    1a28:	82 9f       	mul	r24, r18
    1a2a:	22 27       	eor	r18, r18
    1a2c:	b0 0d       	add	r27, r0
    1a2e:	a1 1d       	adc	r26, r1
    1a30:	62 1f       	adc	r22, r18
    1a32:	73 9f       	mul	r23, r19
    1a34:	b0 0d       	add	r27, r0
    1a36:	a1 1d       	adc	r26, r1
    1a38:	62 1f       	adc	r22, r18
    1a3a:	83 9f       	mul	r24, r19
    1a3c:	a0 0d       	add	r26, r0
    1a3e:	61 1d       	adc	r22, r1
    1a40:	22 1f       	adc	r18, r18
    1a42:	74 9f       	mul	r23, r20
    1a44:	33 27       	eor	r19, r19
    1a46:	a0 0d       	add	r26, r0
    1a48:	61 1d       	adc	r22, r1
    1a4a:	23 1f       	adc	r18, r19
    1a4c:	84 9f       	mul	r24, r20
    1a4e:	60 0d       	add	r22, r0
    1a50:	21 1d       	adc	r18, r1
    1a52:	82 2f       	mov	r24, r18
    1a54:	76 2f       	mov	r23, r22
    1a56:	6a 2f       	mov	r22, r26
    1a58:	11 24       	eor	r1, r1
    1a5a:	9f 57       	subi	r25, 0x7F	; 127
    1a5c:	50 40       	sbci	r21, 0x00	; 0
    1a5e:	9a f0       	brmi	.+38     	; 0x1a86 <__mulsf3_pse+0x88>
    1a60:	f1 f0       	breq	.+60     	; 0x1a9e <__mulsf3_pse+0xa0>
    1a62:	88 23       	and	r24, r24
    1a64:	4a f0       	brmi	.+18     	; 0x1a78 <__mulsf3_pse+0x7a>
    1a66:	ee 0f       	add	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	66 1f       	adc	r22, r22
    1a6e:	77 1f       	adc	r23, r23
    1a70:	88 1f       	adc	r24, r24
    1a72:	91 50       	subi	r25, 0x01	; 1
    1a74:	50 40       	sbci	r21, 0x00	; 0
    1a76:	a9 f7       	brne	.-22     	; 0x1a62 <__mulsf3_pse+0x64>
    1a78:	9e 3f       	cpi	r25, 0xFE	; 254
    1a7a:	51 05       	cpc	r21, r1
    1a7c:	80 f0       	brcs	.+32     	; 0x1a9e <__mulsf3_pse+0xa0>
    1a7e:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_inf>
    1a82:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__fp_szero>
    1a86:	5f 3f       	cpi	r21, 0xFF	; 255
    1a88:	e4 f3       	brlt	.-8      	; 0x1a82 <__mulsf3_pse+0x84>
    1a8a:	98 3e       	cpi	r25, 0xE8	; 232
    1a8c:	d4 f3       	brlt	.-12     	; 0x1a82 <__mulsf3_pse+0x84>
    1a8e:	86 95       	lsr	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	b7 95       	ror	r27
    1a96:	f7 95       	ror	r31
    1a98:	e7 95       	ror	r30
    1a9a:	9f 5f       	subi	r25, 0xFF	; 255
    1a9c:	c1 f7       	brne	.-16     	; 0x1a8e <__mulsf3_pse+0x90>
    1a9e:	fe 2b       	or	r31, r30
    1aa0:	88 0f       	add	r24, r24
    1aa2:	91 1d       	adc	r25, r1
    1aa4:	96 95       	lsr	r25
    1aa6:	87 95       	ror	r24
    1aa8:	97 f9       	bld	r25, 7
    1aaa:	08 95       	ret

00001aac <__fp_inf>:
    1aac:	97 f9       	bld	r25, 7
    1aae:	9f 67       	ori	r25, 0x7F	; 127
    1ab0:	80 e8       	ldi	r24, 0x80	; 128
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	08 95       	ret

00001ab8 <__fp_nan>:
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	80 ec       	ldi	r24, 0xC0	; 192
    1abc:	08 95       	ret

00001abe <__fp_pscA>:
    1abe:	00 24       	eor	r0, r0
    1ac0:	0a 94       	dec	r0
    1ac2:	16 16       	cp	r1, r22
    1ac4:	17 06       	cpc	r1, r23
    1ac6:	18 06       	cpc	r1, r24
    1ac8:	09 06       	cpc	r0, r25
    1aca:	08 95       	ret

00001acc <__fp_pscB>:
    1acc:	00 24       	eor	r0, r0
    1ace:	0a 94       	dec	r0
    1ad0:	12 16       	cp	r1, r18
    1ad2:	13 06       	cpc	r1, r19
    1ad4:	14 06       	cpc	r1, r20
    1ad6:	05 06       	cpc	r0, r21
    1ad8:	08 95       	ret

00001ada <__fp_round>:
    1ada:	09 2e       	mov	r0, r25
    1adc:	03 94       	inc	r0
    1ade:	00 0c       	add	r0, r0
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <__fp_round+0xc>
    1ae2:	88 23       	and	r24, r24
    1ae4:	52 f0       	brmi	.+20     	; 0x1afa <__fp_round+0x20>
    1ae6:	bb 0f       	add	r27, r27
    1ae8:	40 f4       	brcc	.+16     	; 0x1afa <__fp_round+0x20>
    1aea:	bf 2b       	or	r27, r31
    1aec:	11 f4       	brne	.+4      	; 0x1af2 <__fp_round+0x18>
    1aee:	60 ff       	sbrs	r22, 0
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <__fp_round+0x20>
    1af2:	6f 5f       	subi	r22, 0xFF	; 255
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	8f 4f       	sbci	r24, 0xFF	; 255
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	08 95       	ret

00001afc <memcpy_P>:
    1afc:	fb 01       	movw	r30, r22
    1afe:	dc 01       	movw	r26, r24
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <memcpy_P+0xa>
    1b02:	05 90       	lpm	r0, Z+
    1b04:	0d 92       	st	X+, r0
    1b06:	41 50       	subi	r20, 0x01	; 1
    1b08:	50 40       	sbci	r21, 0x00	; 0
    1b0a:	d8 f7       	brcc	.-10     	; 0x1b02 <memcpy_P+0x6>
    1b0c:	08 95       	ret

00001b0e <memset>:
    1b0e:	dc 01       	movw	r26, r24
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <memset+0x6>
    1b12:	6d 93       	st	X+, r22
    1b14:	41 50       	subi	r20, 0x01	; 1
    1b16:	50 40       	sbci	r21, 0x00	; 0
    1b18:	e0 f7       	brcc	.-8      	; 0x1b12 <memset+0x4>
    1b1a:	08 95       	ret

00001b1c <itoa>:
    1b1c:	45 32       	cpi	r20, 0x25	; 37
    1b1e:	51 05       	cpc	r21, r1
    1b20:	20 f4       	brcc	.+8      	; 0x1b2a <itoa+0xe>
    1b22:	42 30       	cpi	r20, 0x02	; 2
    1b24:	10 f0       	brcs	.+4      	; 0x1b2a <itoa+0xe>
    1b26:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__itoa_ncheck>
    1b2a:	fb 01       	movw	r30, r22
    1b2c:	10 82       	st	Z, r1
    1b2e:	cb 01       	movw	r24, r22
    1b30:	08 95       	ret

00001b32 <__itoa_ncheck>:
    1b32:	bb 27       	eor	r27, r27
    1b34:	4a 30       	cpi	r20, 0x0A	; 10
    1b36:	31 f4       	brne	.+12     	; 0x1b44 <__itoa_ncheck+0x12>
    1b38:	99 23       	and	r25, r25
    1b3a:	22 f4       	brpl	.+8      	; 0x1b44 <__itoa_ncheck+0x12>
    1b3c:	bd e2       	ldi	r27, 0x2D	; 45
    1b3e:	90 95       	com	r25
    1b40:	81 95       	neg	r24
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__utoa_common>

00001b48 <__utoa_ncheck>:
    1b48:	bb 27       	eor	r27, r27

00001b4a <__utoa_common>:
    1b4a:	fb 01       	movw	r30, r22
    1b4c:	55 27       	eor	r21, r21
    1b4e:	aa 27       	eor	r26, r26
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	aa 1f       	adc	r26, r26
    1b56:	a4 17       	cp	r26, r20
    1b58:	10 f0       	brcs	.+4      	; 0x1b5e <__utoa_common+0x14>
    1b5a:	a4 1b       	sub	r26, r20
    1b5c:	83 95       	inc	r24
    1b5e:	50 51       	subi	r21, 0x10	; 16
    1b60:	b9 f7       	brne	.-18     	; 0x1b50 <__utoa_common+0x6>
    1b62:	a0 5d       	subi	r26, 0xD0	; 208
    1b64:	aa 33       	cpi	r26, 0x3A	; 58
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <__utoa_common+0x20>
    1b68:	a9 5d       	subi	r26, 0xD9	; 217
    1b6a:	a1 93       	st	Z+, r26
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	79 f7       	brne	.-34     	; 0x1b4e <__utoa_common+0x4>
    1b70:	b1 11       	cpse	r27, r1
    1b72:	b1 93       	st	Z+, r27
    1b74:	11 92       	st	Z+, r1
    1b76:	cb 01       	movw	r24, r22
    1b78:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <strrev>

00001b7c <strrev>:
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	fc 01       	movw	r30, r24
    1b80:	67 2f       	mov	r22, r23
    1b82:	71 91       	ld	r23, Z+
    1b84:	77 23       	and	r23, r23
    1b86:	e1 f7       	brne	.-8      	; 0x1b80 <strrev+0x4>
    1b88:	32 97       	sbiw	r30, 0x02	; 2
    1b8a:	04 c0       	rjmp	.+8      	; 0x1b94 <strrev+0x18>
    1b8c:	7c 91       	ld	r23, X
    1b8e:	6d 93       	st	X+, r22
    1b90:	70 83       	st	Z, r23
    1b92:	62 91       	ld	r22, -Z
    1b94:	ae 17       	cp	r26, r30
    1b96:	bf 07       	cpc	r27, r31
    1b98:	c8 f3       	brcs	.-14     	; 0x1b8c <strrev+0x10>
    1b9a:	08 95       	ret

00001b9c <_exit>:
    1b9c:	f8 94       	cli

00001b9e <__stop_program>:
    1b9e:	ff cf       	rjmp	.-2      	; 0x1b9e <__stop_program>
